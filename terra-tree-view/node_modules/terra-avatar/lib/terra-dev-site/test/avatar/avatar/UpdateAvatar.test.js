"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _index = _interopRequireDefault(require("../../../../index"));

var _x = _interopRequireDefault(require("../../../assets/150x150.jpg"));

var _x2 = _interopRequireDefault(require("../../../assets/200x133.jpg"));

var _x3 = _interopRequireDefault(require("../../../assets/170x251.jpg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var initials = 'JD';
var image = _x.default;
var alt = 'placeholder';
var variant = 'user';
var ariaLabel = 'user';
var id = 'image-avatar';

var UpdateAvatar = /*#__PURE__*/function (_React$Component) {
  _inherits(UpdateAvatar, _React$Component);

  function UpdateAvatar(props) {
    var _this;

    _classCallCheck(this, UpdateAvatar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateAvatar).call(this, props));
    _this.altButtonHandle = _this.altButtonHandle.bind(_assertThisInitialized(_this));
    _this.imageButtonHandle = _this.imageButtonHandle.bind(_assertThisInitialized(_this));
    _this.initialsButtonHandle = _this.initialsButtonHandle.bind(_assertThisInitialized(_this));
    _this.idButtonHandle = _this.idButtonHandle.bind(_assertThisInitialized(_this));
    _this.imageToggleButtonHandle = _this.imageToggleButtonHandle.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(UpdateAvatar, [{
    key: "altButtonHandle",
    value: function altButtonHandle() {
      if (alt === 'placeholder') {
        alt = 'standin';
      } else {
        alt = 'placeholder';
      }

      this.forceUpdate();
    }
  }, {
    key: "imageButtonHandle",
    value: function imageButtonHandle() {
      if (image === _x.default) {
        image = _x2.default;
      } else if (image === _x2.default) {
        image = _x3.default;
      } else {
        image = _x.default;
      }

      this.forceUpdate();
    }
  }, {
    key: "initialsButtonHandle",
    value: function initialsButtonHandle() {
      if (initials === 'JD') {
        initials = 'LI';
      } else {
        initials = 'JD';
      }

      this.forceUpdate();
    }
  }, {
    key: "idButtonHandle",
    value: function idButtonHandle() {
      if (id === 'image-avatar') {
        id = 'avatar-image';
      } else {
        id = 'image-avatar';
      }

      this.forceUpdate();
    }
  }, {
    key: "imageToggleButtonHandle",
    value: function imageToggleButtonHandle() {
      if (image === null) {
        image = _x.default;
      } else {
        image = null;
      }

      this.forceUpdate();
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", null, _react.default.createElement(_index.default, {
        id: id,
        image: image,
        alt: alt,
        variant: variant,
        "aria-label": ariaLabel,
        initials: initials
      }), _react.default.createElement("br", null), _react.default.createElement("button", {
        type: "button",
        onClick: this.altButtonHandle,
        id: "alt"
      }, "Alt Text"), _react.default.createElement("button", {
        type: "button",
        onClick: this.imageButtonHandle,
        id: "image"
      }, "Image"), _react.default.createElement("button", {
        type: "button",
        onClick: this.initialsButtonHandle,
        id: "initials"
      }, "Initials"), _react.default.createElement("button", {
        type: "button",
        onClick: this.idButtonHandle,
        id: "id"
      }, "Custom Prop (id)"), _react.default.createElement("br", null), _react.default.createElement("p", null, "The buttons update one of the Avatar's props then force it to reload"), _react.default.createElement("button", {
        type: "button",
        onClick: this.imageToggleButtonHandle,
        id: "image-toggle"
      }, "Toggle Image"));
    }
  }]);

  return UpdateAvatar;
}(_react.default.Component);

var _default = UpdateAvatar;
exports.default = _default;