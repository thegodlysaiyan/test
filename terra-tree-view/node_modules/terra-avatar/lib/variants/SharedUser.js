"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _AvatarModule = _interopRequireDefault(require("../common/Avatar.module.scss"));

var _AvatarUtils = require("../common/AvatarUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_AvatarModule.default);

var propTypes = {
  /**
   * Specifies the alternative text for the image.
   */
  alt: _propTypes.default.string.isRequired,

  /**
   * Sets the background color. Defaults to `auto`. Accepted color variants are theme specific.
   * One of: `'auto'`, `'neutral'`, `'one'`, `'two'`, `'three'`, `'four'`, `'five'`, `'six'`, `'seven'`, `'eight'`, `'nine'`, `'ten'`.
   */
  color: _propTypes.default.oneOf(['auto', 'neutral', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']),

  /**
   * Value used for the hash function when color is set to `auto`. If not provided, hash function utilizes alt.
   */
  hashValue: _propTypes.default.string,

  /**
   * Whether to hide avatar from the accessibility tree.
   */
  isAriaHidden: _propTypes.default.bool,

  /**
   * Overrides the default size.
   */
  size: _propTypes.default.string
};
var defaultProps = {
  color: 'auto',
  hashValue: undefined,
  isAriaHidden: false,
  size: undefined
};

var SharedUser = function SharedUser(_ref) {
  var alt = _ref.alt,
      color = _ref.color,
      hashValue = _ref.hashValue,
      isAriaHidden = _ref.isAriaHidden,
      size = _ref.size,
      customProps = _objectWithoutProperties(_ref, ["alt", "color", "hashValue", "isAriaHidden", "size"]);

  var colorVariant = (0, _AvatarUtils.setColor)(alt, color, hashValue);

  var attributes = _objectSpread({}, customProps);

  var customStyles = size ? _objectSpread({
    fontSize: size
  }, attributes.style) : attributes.style;
  var multiUserClassNames = cx(['avatar', "".concat(colorVariant), attributes.className]);
  var multiUserIconClassNames = cx(['icon', _AvatarUtils.AVATAR_VARIANTS.SHARED_USER]);

  var multiUserContent = _react.default.createElement("span", {
    className: multiUserIconClassNames,
    role: "img",
    "aria-label": alt,
    alt: alt,
    "aria-hidden": isAriaHidden
  });
  /* eslint-disable react/forbid-dom-props */


  return _react.default.createElement("div", _extends({}, attributes, {
    className: multiUserClassNames,
    style: customStyles
  }), multiUserContent);
  /* eslint-enable react/forbid-dom-props */
};

SharedUser.propTypes = propTypes;
SharedUser.defaultProps = defaultProps;
var _default = SharedUser;
exports.default = _default;