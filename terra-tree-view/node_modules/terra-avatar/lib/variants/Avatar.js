"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _AvatarModule = _interopRequireDefault(require("../common/Avatar.module.scss"));

var _AvatarUtils = require("../common/AvatarUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var cx = _bind.default.bind(_AvatarModule.default);

var propTypes = {
  /**
   * Specifies the alternative text for the image.
   */
  alt: _propTypes.default.string.isRequired,

  /**
   * Sets the background color. Defaults to `auto`. Accepted color variants are theme specific.
   * One of: `'auto'`, `'neutral'`, `'one'`, `'two'`, `'three'`, `'four'`, `'five'`, `'six'`, `'seven'`, `'eight'`, `'nine'`, `'ten'`.
   */
  color: _propTypes.default.oneOf(['auto', 'neutral', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']),

  /**
   * Value used for the hash function when color is set to `auto`. If not provided, hash function utilizes alt.
   */
  hashValue: _propTypes.default.string,

  /**
   * The image to display.
   */
  image: _propTypes.default.string,

  /**
   * One or two letters to display.
   */
  initials: _propTypes.default.string,

  /**
   * Whether to hide avatar from the accessibility tree.
   */
  isAriaHidden: _propTypes.default.bool,

  /**
   * Whether the person is deceased. Overrides any color variant.
   */
  isDeceased: _propTypes.default.bool,

  /**
   * Overrides the default size.
   */
  size: _propTypes.default.string
};
var defaultProps = {
  color: 'auto',
  hashValue: undefined,
  image: undefined,
  initials: undefined,
  isAriaHidden: false,
  isDeceased: false,
  size: undefined
};

var Avatar = /*#__PURE__*/function (_React$Component) {
  _inherits(Avatar, _React$Component);

  function Avatar(props) {
    var _this;

    _classCallCheck(this, Avatar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Avatar).call(this, props));
    _this.state = {
      fallback: false
    };
    _this.handleFallback = _this.handleFallback.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Avatar, [{
    key: "handleFallback",
    value: function handleFallback() {
      this.setState({
        fallback: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          alt = _this$props.alt,
          color = _this$props.color,
          hashValue = _this$props.hashValue,
          image = _this$props.image,
          initials = _this$props.initials,
          isAriaHidden = _this$props.isAriaHidden,
          isDeceased = _this$props.isDeceased,
          size = _this$props.size,
          customProps = _objectWithoutProperties(_this$props, ["alt", "color", "hashValue", "image", "initials", "isAriaHidden", "isDeceased", "size"]);

      var avatarContent;

      if (image) {
        avatarContent = (0, _AvatarUtils.generateImage)(image, alt, isAriaHidden, _AvatarUtils.AVATAR_VARIANTS.USER, this.handleFallback);
      } else if (initials && (initials.length === 1 || initials.length === 2)) {
        var avatarTextClassNames = cx('initials');
        avatarContent = _react.default.createElement("span", {
          className: avatarTextClassNames,
          alt: alt,
          "aria-label": alt,
          "aria-hidden": isAriaHidden
        }, initials.toUpperCase());
      } else {
        avatarContent = (0, _AvatarUtils.generateImagePlaceholder)(alt, isAriaHidden, _AvatarUtils.AVATAR_VARIANTS.USER);
      }

      var attributes = _objectSpread({}, customProps);

      var customStyles = size ? _objectSpread({
        fontSize: size
      }, attributes.style) : attributes.style;
      var avatarClassNames = cx(['avatar', (0, _AvatarUtils.setColor)(alt, color, hashValue), {
        'fallback-icon': this.state.fallback
      }, {
        image: Boolean(image)
      }, {
        'is-deceased': isDeceased
      }, attributes.className]);
      /* eslint-disable react/forbid-dom-props */

      return _react.default.createElement("div", _extends({}, attributes, {
        className: avatarClassNames,
        style: customStyles
      }), avatarContent);
      /* eslint-enable react/forbid-dom-props */
    }
  }]);

  return Avatar;
}(_react.default.Component);

Avatar.propTypes = propTypes;
Avatar.defaultProps = defaultProps;
var _default = Avatar;
exports.default = _default;