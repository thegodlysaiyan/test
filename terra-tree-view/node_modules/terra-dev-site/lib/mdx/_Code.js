"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _prismReactRenderer = _interopRequireWildcard(require("prism-react-renderer"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _MarkdownTagsModule = _interopRequireDefault(require("./MarkdownTags.module.scss"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var cx = _bind.default.bind(_MarkdownTagsModule.default);

var propTypes = {
  /**
   * Children for the component.
   */
  children: _propTypes.default.node,

  /**
   * ClassName for the component.
   */
  className: _propTypes.default.string
};

var Code = function Code(_ref) {
  var children = _ref.children,
      className = _ref.className;
  var language = (className || '').replace(/language-/, '');
  return (// We remove the theme to just use the css theme.
    _react.default.createElement(_prismReactRenderer.default, _extends({}, _prismReactRenderer.defaultProps, {
      code: children,
      language: language,
      theme: undefined
    }), function (_ref2) {
      var highlightClassName = _ref2.className,
          tokens = _ref2.tokens,
          getLineProps = _ref2.getLineProps,
          getTokenProps = _ref2.getTokenProps;
      return (// add the code block class.
        _react.default.createElement("code", {
          className: [cx('code'), highlightClassName].join(' ')
        }, tokens.map(function (line, i) {
          return _react.default.createElement("div", getLineProps({
            line: line,
            key: i
          }), line.map(function (token, key) {
            return _react.default.createElement("span", getTokenProps({
              token: token,
              key: key
            }));
          }));
        }))
      );
    })
  );
};

Code.propTypes = propTypes;
var _default = Code;
exports.default = _default;