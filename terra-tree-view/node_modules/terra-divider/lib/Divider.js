"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _DividerModule = _interopRequireDefault(require("./Divider.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  /**
  * String to be displayed inline with the divider.
  */
  text: _propTypes.default.string
};

var cx = _bind.default.bind(_DividerModule.default);

var Divider = function Divider(props) {
  var text = props.text,
      customProps = _objectWithoutProperties(props, ["text"]);

  var dividerClassNames = cx(['divider', customProps.className]);

  if (!text) {
    return _react.default.createElement("hr", _extends({}, customProps, {
      className: dividerClassNames,
      "aria-hidden": "true"
    }));
  }

  return _react.default.createElement("div", {
    className: cx(['divider-container'])
  }, _react.default.createElement("span", {
    className: cx(['divider-text'])
  }, text));
};

Divider.propTypes = propTypes;
var _default = Divider;
exports.default = _default;