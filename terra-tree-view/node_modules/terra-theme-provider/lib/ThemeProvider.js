"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var cx = _classnames.default;
var ThemeProviderThemes = {
  CONSUMER: 'cerner-consumer-theme',
  MOCK: 'cerner-mock-theme'
};
var propTypes = {
  /**
   * The component(s) that will be wrapped by `<ThemeProvider />`
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Name of class for specified theme. e.g `cerner-consumer-theme`
   */
  themeName: _propTypes.default.string,

  /**
   * When set to true, applies theme class to HTML element
   */
  isGlobalTheme: _propTypes.default.bool
};
var defaultProps = {
  isGlobalTheme: false
};

var ThemeProvider = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ThemeProvider, _React$Component);

  function ThemeProvider() {
    (0, _classCallCheck2.default)(this, ThemeProvider);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ThemeProvider).apply(this, arguments));
  }

  (0, _createClass2.default)(ThemeProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.isGlobalTheme === true && this.props.themeName) {
        document.documentElement.classList.add(this.props.themeName);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props === prevProps) return;

      if (this.props.isGlobalTheme === true) {
        if (prevProps.themeName) {
          document.documentElement.classList.remove(prevProps.themeName);
        }

        if (this.props.themeName) {
          document.documentElement.classList.add(this.props.themeName);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.isGlobalTheme === true && this.props.themeName) {
        document.documentElement.classList.remove(this.props.themeName);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          themeName = _this$props.themeName,
          isGlobalTheme = _this$props.isGlobalTheme,
          children = _this$props.children,
          customProps = (0, _objectWithoutProperties2.default)(_this$props, ["themeName", "isGlobalTheme", "children"]);
      return _react.default.createElement("div", (0, _extends2.default)({}, customProps, {
        className: cx(themeName, customProps.className)
      }), children);
    }
  }]);
  return ThemeProvider;
}(_react.default.Component);

ThemeProvider.propTypes = propTypes;
ThemeProvider.defaultProps = defaultProps;
ThemeProvider.Opts = {};
ThemeProvider.Opts.Themes = ThemeProviderThemes;
var _default = ThemeProvider;
exports.default = _default;