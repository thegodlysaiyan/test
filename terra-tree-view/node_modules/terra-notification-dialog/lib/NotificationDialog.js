"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NotificationDialogVariants = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _terraAbstractModal = _interopRequireDefault(require("terra-abstract-modal"));

var _focusTrapReact = _interopRequireDefault(require("focus-trap-react"));

var KeyCode = _interopRequireWildcard(require("keycode-js"));

var _terraButton = _interopRequireWildcard(require("terra-button"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _reactIntl = require("react-intl");

var _NotificationDialogModule = _interopRequireDefault(require("./NotificationDialog.module.scss"));

var cx = _bind.default.bind(_NotificationDialogModule.default);

var variants = {
  ALERT: 'alert',
  ERROR: 'error',
  WARNING: 'warning',
  INFO: 'info',
  SUCCESS: 'success',
  CUSTOM: 'custom'
};
exports.NotificationDialogVariants = variants;
var propTypes = {
  /**
   * Header of the notification-dialog.
   */
  header: _propTypes.default.string,

  /**
   * Title of the notification-dialog.
   */
  title: _propTypes.default.string,

  /**
   * **Deprecated**, Message of the notification-dialog. Resolves to `startMessage`.
   */
  message: _propTypes.default.string,

  /**
   * Message to be displayed at the start of the notification dialog body.
   */
  startMessage: _propTypes.default.string,

  /**
   * Message to be displayed at the end of the notification dialog body.
   */
  endMessage: _propTypes.default.string,

  /**
   *  Non-plain text content to be inserted after `startMessage` and/or before `endMessage`
   */
  content: _propTypes.default.node,

  /**
   * **Deprecated**, The Action of the primary button. Resolves to `acceptAction`
   */
  primaryAction: _propTypes.default.shape({
    text: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * The Action of the accept button.
   */
  acceptAction: _propTypes.default.shape({
    text: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * **Deprecated**, The Action of the secondary button. Resolves to `rejectAction`.
   */
  secondaryAction: _propTypes.default.shape({
    text: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * The Action of the reject button.
   */
  rejectAction: _propTypes.default.shape({
    text: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * The variant of notification to be rendered.
   * Use one of `alert`, `error`, `warning`, `info`, `success`, `custom`.
   */
  variant: _propTypes.default.oneOf([variants.ALERT, variants.ERROR, variants.WARNING, variants.INFO, variants.SUCCESS, variants.CUSTOM]),

  /**
   * The icon to be used for a notification of type custom. This will not be used for any other notification types.
   */
  customIcon: _propTypes.default.element,

  /**
   * Toggle to show notification-dialog or not.
   */
  isOpen: _propTypes.default.bool.isRequired,

  /**
   * Determines the order of notification action buttons.
   * Use one of `acceptFirst`, `rejectFirst`.
   */
  buttonOrder: _propTypes.default.oneOf(['acceptFirst', 'rejectFirst']),

  /**
   * Determines whether acceptAction, rejectAction or neither is emphasizedAction
   * Use one of `none`, `accept` or `reject`.
   */
  emphasizedAction: _propTypes.default.oneOf(['none', 'accept', 'reject'])
};
var defaultProps = {
  title: null,
  startMessage: null,
  endMessage: null,
  content: null,
  variant: variants.CUSTOM,
  buttonOrder: 'acceptFirst',
  emphasizedAction: 'none'
};

var actionSection = function actionSection(acceptAction, rejectAction, buttonOrder, emphasizedAction) {
  var acceptButton = null;
  var rejectButton = null;

  if (!acceptAction && !rejectAction) {
    return null;
  }

  if (acceptAction) {
    acceptButton = emphasizedAction === 'accept' ? _react.default.createElement(_terraButton.default, {
      text: acceptAction.text,
      variant: _terraButton.ButtonVariants.EMPHASIS,
      onClick: acceptAction.onClick
    }) : _react.default.createElement(_terraButton.default, {
      text: acceptAction.text,
      onClick: acceptAction.onClick
    });
  }

  if (rejectAction) {
    rejectButton = emphasizedAction === 'reject' ? _react.default.createElement(_terraButton.default, {
      text: rejectAction.text,
      variant: _terraButton.ButtonVariants.EMPHASIS,
      onClick: rejectAction.onClick
    }) : _react.default.createElement(_terraButton.default, {
      text: rejectAction.text,
      onClick: rejectAction.onClick
    });
  }

  if (buttonOrder === 'rejectFirst') {
    return _react.default.createElement("div", {
      className: cx('actions')
    }, rejectButton, acceptButton);
  }

  return _react.default.createElement("div", {
    className: cx('actions')
  }, acceptButton, rejectButton);
};

var getIcon = function getIcon(variant) {
  var customIcon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  switch (variant) {
    case variants.ALERT:
      return _react.default.createElement("span", {
        className: cx(['icon', 'alert'])
      });

    case variants.ERROR:
      return _react.default.createElement("span", {
        className: cx(['icon', 'error'])
      });

    case variants.WARNING:
      return _react.default.createElement("span", {
        className: cx(['icon', 'warning'])
      });

    case variants.INFO:
      return _react.default.createElement("span", {
        className: cx(['icon', 'info'])
      });

    case variants.SUCCESS:
      return _react.default.createElement("span", {
        className: cx(['icon', 'success'])
      });

    case variants.CUSTOM:
      return customIcon;

    default:
      return null;
  }
};

var NotificationDialog = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(NotificationDialog, _React$Component);

  function NotificationDialog(props) {
    var _this;

    (0, _classCallCheck2.default)(this, NotificationDialog);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NotificationDialog).call(this, props));
    _this.handleKeydown = _this.handleKeydown.bind((0, _assertThisInitialized2.default)(_this));
    _this.escapeKey = KeyCode.KEY_ESCAPE;
    return _this;
  }

  (0, _createClass2.default)(NotificationDialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('keydown', this.handleKeydown);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.handleKeydown);
    }
  }, {
    key: "handleKeydown",
    value: function handleKeydown(e) {
      var notificationDialog = document.querySelector('[data-terra-notification-dialog]');

      if (e.keyCode === this.escapeKey) {
        if (notificationDialog) {
          if (e.target === notificationDialog || notificationDialog.contains(e.target)) {
            e.stopImmediatePropagation();
          }
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.props.isOpen) {
        return null;
      }

      var _this$props = this.props,
          header = _this$props.header,
          title = _this$props.title,
          startMessage = _this$props.startMessage,
          endMessage = _this$props.endMessage,
          content = _this$props.content,
          acceptAction = _this$props.acceptAction,
          rejectAction = _this$props.rejectAction,
          variant = _this$props.variant,
          customIcon = _this$props.customIcon,
          isOpen = _this$props.isOpen,
          buttonOrder = _this$props.buttonOrder,
          emphasizedAction = _this$props.emphasizedAction,
          primaryAction = _this$props.primaryAction,
          secondaryAction = _this$props.secondaryAction,
          message = _this$props.message,
          customProps = (0, _objectWithoutProperties2.default)(_this$props, ["header", "title", "startMessage", "endMessage", "content", "acceptAction", "rejectAction", "variant", "customIcon", "isOpen", "buttonOrder", "emphasizedAction", "primaryAction", "secondaryAction", "message"]);

      if (process.env.NODE_ENV !== 'production' && acceptAction === undefined && primaryAction === undefined && rejectAction === undefined && secondaryAction === undefined) {
        // eslint-disable-next-line no-console
        console.warn('At least one of `acceptAction`,`primaryAction`,`rejectAction`,`secondaryAction` props must be provided for Notification dialog');
      }

      var defaultHeader = variant === variants.CUSTOM ? '' : _react.default.createElement(_reactIntl.FormattedMessage, {
        id: "Terra.notification.dialog.".concat(variant)
      });
      var notificationDialogClassNames = cx('notification-dialog', customProps.className);
      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */

      return _react.default.createElement(_terraAbstractModal.default, {
        ariaLabel: "Notification Dialog",
        "aria-labelledby": "notification-dialog-header",
        "aria-describedby": title ? 'notification-dialog-title' : 'notification-dialog-header',
        role: "alertdialog",
        classNameModal: notificationDialogClassNames,
        isOpen: this.props.isOpen,
        onRequestClose: function onRequestClose() {},
        closeOnEsc: false,
        closeOnOutsideClick: false,
        zIndex: "9000",
        "data-terra-notification-dialog": true
      }, _react.default.createElement(_focusTrapReact.default, {
        focusTrapOptions: {
          returnFocusOnDeactivate: true,
          clickOutsideDeactivates: false,
          escapeDeactivates: false
        }
      }, _react.default.createElement("div", {
        className: cx('notification-dialog-inner-wrapper')
      }, _react.default.createElement("div", {
        className: cx('notification-dialog-container'),
        tabIndex: "0"
      }, _react.default.createElement("div", {
        id: "notification-dialog-header",
        className: cx('header-body')
      }, header || defaultHeader), _react.default.createElement("div", {
        className: cx('notification-dialog-body')
      }, variant && _react.default.createElement("div", {
        className: cx('icon-container')
      }, getIcon(variant, customIcon)), _react.default.createElement("div", {
        className: cx('text-wrapper')
      }, title && _react.default.createElement("div", {
        id: "notification-dialog-title",
        className: cx('title')
      }, title), (startMessage || message) && _react.default.createElement("div", {
        className: cx('message')
      }, startMessage || message), content && _react.default.createElement("div", null, content), endMessage && _react.default.createElement("div", {
        className: cx('message')
      }, endMessage))), _react.default.createElement("div", {
        className: cx('footer-body')
      }, actionSection(acceptAction || primaryAction, rejectAction || secondaryAction, buttonOrder, emphasizedAction))))));
      /* eslint-enable jsx-a11y/no-noninteractive-tabindex */
    }
  }]);
  return NotificationDialog;
}(_react.default.Component);

NotificationDialog.propTypes = propTypes;
NotificationDialog.defaultProps = defaultProps;
var _default = NotificationDialog;
exports.default = _default;