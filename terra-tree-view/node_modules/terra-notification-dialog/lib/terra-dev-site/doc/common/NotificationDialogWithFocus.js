"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _terraButton = _interopRequireDefault(require("terra-button"));

var _terraDisclosureManager = require("terra-disclosure-manager");

var _terraPopup = _interopRequireDefault(require("terra-popup"));

var _Placeholder = _interopRequireDefault(require("terra-doc-template/lib/Placeholder"));

var _terraNotificationDialog = _interopRequireWildcard(require("terra-notification-dialog"));

var clickConfirm = function clickConfirm() {
  alert('You clicked confirm'); // eslint-disable-line no-alert
};

var propTypes = {
  disclosureManager: _terraDisclosureManager.disclosureManagerShape
};

var NotificationDialogWithFocus = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(NotificationDialogWithFocus, _React$Component);

  function NotificationDialogWithFocus(props) {
    var _this;

    (0, _classCallCheck2.default)(this, NotificationDialogWithFocus);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NotificationDialogWithFocus).call(this, props));
    _this.state = {
      isOpen: false
    };
    _this.handleOpenModal = _this.handleOpenModal.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleCloseModal = _this.handleCloseModal.bind((0, _assertThisInitialized2.default)(_this));
    _this.handlePopupButtonClick = _this.handlePopupButtonClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handlePopupRequestClose = _this.handlePopupRequestClose.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(NotificationDialogWithFocus, [{
    key: "handleOpenModal",
    value: function handleOpenModal() {
      this.setState({
        isOpen: true
      });
    }
  }, {
    key: "handleCloseModal",
    value: function handleCloseModal() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "handlePopupButtonClick",
    value: function handlePopupButtonClick() {
      this.setState({
        open: true
      });
    }
  }, {
    key: "handlePopupRequestClose",
    value: function handlePopupRequestClose() {
      this.setState({
        open: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", null, _react.default.createElement(_terraNotificationDialog.default, {
        variant: _terraNotificationDialog.NotificationDialogVariants.ALERT,
        isOpen: this.state.isOpen,
        onRequestClose: this.handleCloseModal,
        title: "Make sure that the title relates directly to the choices.",
        startMessage: "The Main Instruction is text used to provide more detail or define terminology. Don\u2019t repeat the title verbatim.",
        acceptAction: {
          text: 'Confirm',
          onClick: clickConfirm
        },
        rejectAction: {
          text: 'Close',
          onClick: this.handleCloseModal
        },
        buttonOrder: "acceptFirst",
        emphasizedAction: "accept"
      }), _react.default.createElement(_terraButton.default, {
        text: "Trigger NotificationDialog",
        onClick: this.handleOpenModal,
        id: "trigger-notification-dialog"
      }), _react.default.createElement(_terraButton.default, {
        text: "Dismiss",
        onClick: this.props.disclosureManager.dismiss,
        id: "dismiss-modal"
      }), _react.default.createElement(_terraPopup.default, {
        isArrowDisplayed: true,
        isOpen: this.state.open,
        onRequestClose: this.handlePopupRequestClose,
        targetRef: function targetRef() {
          return document.getElementById('popup-in-modal');
        }
      }, _react.default.createElement(_Placeholder.default, {
        title: "Popup Content"
      })), _react.default.createElement(_terraButton.default, {
        id: "popup-in-modal",
        text: "Popup In Modal",
        onClick: this.handlePopupButtonClick
      }));
    }
  }]);
  return NotificationDialogWithFocus;
}(_react.default.Component);

NotificationDialogWithFocus.propTypes = propTypes;

var _default = (0, _terraDisclosureManager.withDisclosureManager)(NotificationDialogWithFocus);

exports.default = _default;