"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _terraButton = _interopRequireDefault(require("terra-button"));

var _terraDisclosureManager = require("terra-disclosure-manager");

var _terraPopup = _interopRequireDefault(require("terra-popup"));

var _Placeholder = _interopRequireDefault(require("terra-doc-template/lib/Placeholder"));

var _terraNotificationDialog = _interopRequireWildcard(require("terra-notification-dialog"));

var clickConfirm = function clickConfirm() {
  console.log('You clicked confirm'); // eslint-disable-line no-console
};

var propTypes = {
  disclosureManager: _terraDisclosureManager.disclosureManagerShape
};

var NotificationDialogWithFocus = function NotificationDialogWithFocus(props) {
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isPopupOpen = _useState4[0],
      setIsPopupOpen = _useState4[1];

  var handleOpenModal = function handleOpenModal() {
    setIsOpen(true);
  };

  var handleCloseModal = function handleCloseModal() {
    setIsOpen(false);
  };

  var handlePopupButtonClick = function handlePopupButtonClick() {
    setIsPopupOpen(true);
  };

  var handlePopupRequestClose = function handlePopupRequestClose() {
    setIsPopupOpen(false);
  };

  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_terraNotificationDialog.default, {
    variant: _terraNotificationDialog.NotificationDialogVariants.ALERT,
    isOpen: isOpen,
    title: "Make sure that the title relates directly to the choices.",
    startMessage: "The Main Instruction is text used to provide more detail or define terminology. Don\u2019t repeat the title verbatim.",
    acceptAction: {
      text: 'Confirm',
      onClick: clickConfirm
    },
    rejectAction: {
      text: 'Close',
      onClick: handleCloseModal
    },
    buttonOrder: "acceptFirst",
    emphasizedAction: "accept"
  }), _react.default.createElement(_terraButton.default, {
    text: "Trigger NotificationDialog",
    onClick: handleOpenModal
  }), _react.default.createElement(_terraButton.default, {
    text: "Dismiss",
    onClick: props.disclosureManager.dismiss
  }), _react.default.createElement(_terraPopup.default, {
    isArrowDisplayed: true,
    isOpen: isPopupOpen,
    onRequestClose: handlePopupRequestClose,
    targetRef: function targetRef() {
      return document.getElementById('popup-in-modal');
    }
  }, _react.default.createElement(_Placeholder.default, {
    title: "Popup Content"
  })), _react.default.createElement(_terraButton.default, {
    id: "popup-in-modal",
    text: "Popup In Modal",
    onClick: handlePopupButtonClick
  }));
};

NotificationDialogWithFocus.propTypes = propTypes;

var _default = (0, _terraDisclosureManager.withDisclosureManager)(NotificationDialogWithFocus);

exports.default = _default;