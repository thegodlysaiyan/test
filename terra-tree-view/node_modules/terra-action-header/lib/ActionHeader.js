"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _terraButton = _interopRequireWildcard(require("terra-button"));

var _reactIntl = require("react-intl");

var _ActionHeaderContainer = _interopRequireDefault(require("./_ActionHeaderContainer"));

var _ActionHeaderModule = _interopRequireDefault(require("./ActionHeader.module.scss"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_ActionHeaderModule.default);

var propTypes = {
  /**
   * Displays a single terra `Collapsible Menu View` (_Not provided by `Action Header`_) child element on the right end of the header.
   */
  children: _propTypes.default.element,

  /**
   * Optionally sets the heading level. One of `1`, `2`, `3`, `4`, `5`, `6`. Default `level=1`. This helps screen readers to announce appropriate heading levels.
   * Changing 'level' will not visually change the style of the content.
   */
  level: _propTypes.default.oneOf([1, 2, 3, 4, 5, 6]),

  /**
   * Callback function for when the close button is clicked.
   * On small viewports, this will be triggered by a back button if onBack is not set.
   */
  onClose: _propTypes.default.func,

  /**
   * Callback function for when the back button is clicked. The back button will not display if this is not set.
   */
  onBack: _propTypes.default.func,

  /**
   * Callback function for when the expand button is clicked.
   * The expand button will not display if this is not set or on small viewports.
   * Only the expand button will be rendered if onMaximize and onMinimize are set.
   *
   * *Note: If `onBack` is set, the maximize button will not appear and a custom maximize button must be provided
   * as a child inside a `Collapsible Menu View`.*
   */
  onMaximize: _propTypes.default.func,

  /**
   * Callback function for when the minimize button is clicked.
   * The minimize button will not display if this is not set or on small viewports.
   * Only the expand button will be rendered if both onMaximize and onMinimize are set.
   *
   * *Note: If `onBack` is set, the minimize button will not appear and a custom minimize button must be provided
   * as a child inside a `Collapsible Menu View`.*
   */
  onMinimize: _propTypes.default.func,

  /**
   * Callback function for when the next button is clicked. The previous-next button group will display if either this or onPrevious is set but the button for the one not set will be disabled.
   */
  onNext: _propTypes.default.func,

  /**
   * Callback function for when the previous button is clicked. The previous-next button group will display if either this or onNext is set but the button for the one not set will be disabled.
   */
  onPrevious: _propTypes.default.func,

  /**
   * Text to be displayed as the title in the header bar.
   */
  title: _propTypes.default.string
};
var defaultProps = {
  title: undefined,
  level: 1,
  onClose: undefined,
  onBack: undefined,
  onMaximize: undefined,
  onMinimize: undefined,
  onNext: undefined,
  onPrevious: undefined,
  children: undefined
};

var ActionHeader = function ActionHeader(_ref) {
  var title = _ref.title,
      level = _ref.level,
      onClose = _ref.onClose,
      onBack = _ref.onBack,
      onMaximize = _ref.onMaximize,
      onMinimize = _ref.onMinimize,
      onPrevious = _ref.onPrevious,
      onNext = _ref.onNext,
      children = _ref.children,
      customProps = _objectWithoutProperties(_ref, ["title", "level", "onClose", "onBack", "onMaximize", "onMinimize", "onPrevious", "onNext", "children"]);

  var closeButton = onClose ? _react.default.createElement(_reactIntl.FormattedMessage, {
    id: "Terra.actionHeader.close"
  }, function (closeText) {
    return _react.default.createElement(_terraButton.default, {
      className: cx(['header-button', 'close-button']),
      "data-terra-action-header": "close-button",
      isIconOnly: true,
      icon: _react.default.createElement("span", {
        className: cx(['header-icon', 'close'])
      }),
      text: closeText,
      onClick: onClose,
      variant: _terraButton.ButtonVariants.UTILITY
    });
  }) : null;
  var backButton = onBack ? _react.default.createElement(_reactIntl.FormattedMessage, {
    id: "Terra.actionHeader.back"
  }, function (backText) {
    return _react.default.createElement(_terraButton.default, {
      className: cx(['header-button', 'back-button']),
      "data-terra-action-header": "back-button",
      isIconOnly: true,
      icon: _react.default.createElement("span", {
        className: cx(['header-icon', 'back'])
      }),
      text: backText,
      onClick: onBack,
      variant: _terraButton.ButtonVariants.UTILITY
    });
  }) : null;
  var expandButton;

  if (!backButton) {
    if (onMaximize) {
      expandButton = _react.default.createElement(_reactIntl.FormattedMessage, {
        id: "Terra.actionHeader.maximize"
      }, function (maximizeText) {
        return _react.default.createElement(_terraButton.default, {
          className: cx(['header-button', 'maximize-button']),
          "data-terra-action-header": "maximize-button",
          isIconOnly: true,
          icon: _react.default.createElement("span", {
            className: cx(['header-icon', 'maximize'])
          }),
          text: maximizeText,
          onClick: onMaximize,
          variant: _terraButton.ButtonVariants.UTILITY
        });
      });
    } else if (onMinimize) {
      expandButton = _react.default.createElement(_reactIntl.FormattedMessage, {
        id: "Terra.actionHeader.minimize"
      }, function (minimizeText) {
        return _react.default.createElement(_terraButton.default, {
          className: cx(['header-button', 'minimize-button']),
          "data-terra-action-header": "minimize-button",
          isIconOnly: true,
          icon: _react.default.createElement("span", {
            className: cx(['header-icon', 'minimize'])
          }),
          text: minimizeText,
          onClick: onMinimize,
          variant: _terraButton.ButtonVariants.UTILITY
        });
      });
    }
  }

  var previousNextButtonGroup = onPrevious || onNext ? _react.default.createElement("div", {
    className: cx('previous-next-button-group')
  }, _react.default.createElement(_reactIntl.FormattedMessage, {
    id: "Terra.actionHeader.previous"
  }, function (previousText) {
    return _react.default.createElement(_terraButton.default, {
      className: cx(['header-button', 'previous-button']),
      "data-terra-action-header": "previous-button",
      isIconOnly: true,
      icon: _react.default.createElement("span", {
        className: cx(['header-icon', 'previous'])
      }),
      text: previousText,
      onClick: onPrevious,
      isDisabled: onPrevious === undefined,
      variant: _terraButton.ButtonVariants.UTILITY
    });
  }), _react.default.createElement(_reactIntl.FormattedMessage, {
    id: "Terra.actionHeader.next"
  }, function (nextText) {
    return _react.default.createElement(_terraButton.default, {
      className: cx(['header-button', 'next-button']),
      "data-terra-action-header": "next-button",
      isIconOnly: true,
      icon: _react.default.createElement("span", {
        className: cx(['header-icon', 'next'])
      }),
      text: nextText,
      onClick: onNext,
      isDisabled: onNext === undefined,
      variant: _terraButton.ButtonVariants.UTILITY
    });
  })) : null;
  var leftButtons = backButton || expandButton || previousNextButtonGroup ? _react.default.createElement("div", {
    className: cx('left-buttons')
  }, backButton, expandButton, previousNextButtonGroup) : null;
  var rightButtons = closeButton ? _react.default.createElement("div", {
    className: cx('right-buttons')
  }, closeButton) : null;
  return _react.default.createElement(_ActionHeaderContainer.default, _extends({}, customProps, {
    startContent: leftButtons,
    title: title,
    endContent: rightButtons,
    level: level
  }), children);
};

ActionHeader.propTypes = propTypes;
ActionHeader.defaultProps = defaultProps;
var _default = ActionHeader;
exports.default = _default;