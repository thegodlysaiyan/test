"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _terraButton = _interopRequireDefault(require("terra-button"));

var _terraPopup = _interopRequireDefault(require("terra-popup"));

var _Placeholder = _interopRequireDefault(require("terra-doc-template/lib/Placeholder"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _PopupAttachmentsModule = _interopRequireDefault(require("./PopupAttachments.module.scss"));

var cx = _bind.default.bind(_PopupAttachmentsModule.default);

var ATTACHMENT_POSITIONS = ['top left', 'top center', 'top right', 'middle left', 'middle center', 'middle right', 'bottom left', 'bottom center', 'bottom right'];

var generateOptions = function generateOptions(values) {
  return values.map(function (currentValue, index) {
    var keyValue = index;
    return _react.default.createElement("option", {
      key: keyValue,
      value: currentValue
    }, currentValue);
  });
};

function PopupAttachment() {
  var buttonElement = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(ATTACHMENT_POSITIONS[0]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      contentAttachment = _useState4[0],
      setContentAttachment = _useState4[1];

  var setButtonNode = function setButtonNode(node) {
    buttonElement.current = node;
  };

  var getButtonNode = function getButtonNode() {
    return buttonElement.current;
  };

  var handleButtonClick = function handleButtonClick() {
    setOpen(true);
  };

  var handleRequestClose = function handleRequestClose() {
    setOpen(false);
  };

  var handleContentAttachmentChange = function handleContentAttachmentChange(event) {
    setContentAttachment(event.target.value);
  };

  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", null, _react.default.createElement("select", {
    id: "ContentAttachment",
    name: "popupContentAttachment",
    onChange: handleContentAttachmentChange
  }, generateOptions(ATTACHMENT_POSITIONS)), _react.default.createElement(_terraButton.default, {
    className: cx('popup-wrapper'),
    text: "Open Popup",
    onClick: handleButtonClick,
    refCallback: setButtonNode
  })), _react.default.createElement(_terraPopup.default, {
    attachmentBehavior: "auto",
    contentAttachment: contentAttachment,
    isOpen: open,
    targetRef: getButtonNode,
    onRequestClose: handleRequestClose
  }, _react.default.createElement(_Placeholder.default, {
    title: "Popup Content"
  })));
}

var _default = PopupAttachment;
exports.default = _default;