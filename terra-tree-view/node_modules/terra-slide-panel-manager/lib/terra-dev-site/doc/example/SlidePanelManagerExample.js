"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _terraActionHeader = _interopRequireDefault(require("terra-action-header"));

var _terraCollapsibleMenuView = _interopRequireDefault(require("terra-collapsible-menu-view"));

var _terraContentContainer = _interopRequireDefault(require("terra-content-container"));

var _terraDisclosureManager = require("terra-disclosure-manager");

var _terraSlidePanelManager = _interopRequireDefault(require("terra-slide-panel-manager"));

var _SlidePanelManagerModule = _interopRequireDefault(require("terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss"));

/* eslint-disable max-classes-per-file */
var cx = _bind.default.bind(_SlidePanelManagerModule.default);

var DisclosureComponent = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(DisclosureComponent, _React$Component);

  function DisclosureComponent(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DisclosureComponent);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DisclosureComponent).call(this, props));
    _this.checkLockState = _this.checkLockState.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      text: undefined
    };
    return _this;
  }

  (0, _createClass2.default)(DisclosureComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var disclosureManager = this.context;

      if (disclosureManager && disclosureManager.registerDismissCheck) {
        disclosureManager.registerDismissCheck(this.checkLockState);
      }
    }
  }, {
    key: "checkLockState",
    value: function checkLockState() {
      var _this2 = this;

      if (this.state.text && this.state.text.length) {
        return new Promise(function (resolve, reject) {
          // eslint-disable-next-line no-restricted-globals
          if (!confirm("".concat(_this2.props.name, " has unsaved changes that will be lost. Do you wish to continue?"))) {
            // eslint-disable-line no-alert
            reject();
            return;
          }

          resolve();
        });
      }

      return Promise.resolve();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          name = _this$props.name,
          disclosureType = _this$props.disclosureType;
      var disclosureManager = this.context;
      return _react.default.createElement(_terraContentContainer.default, {
        fill: true
      }, _react.default.createElement(_terraDisclosureManager.DisclosureManagerHeaderAdapter, {
        title: name,
        collapsibleMenuView: _react.default.createElement(_terraCollapsibleMenuView.default, null, _react.default.createElement(_terraCollapsibleMenuView.default.Item, {
          text: "Button 1",
          key: "button_1",
          onClick: function onClick() {
            _this3.setState({
              selectedHeaderAction: 'Button 1'
            });
          }
        }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {
          text: "Button 2",
          key: "button_2",
          onClick: function onClick() {
            _this3.setState({
              selectedHeaderAction: 'Button 2'
            });
          }
        }))
      }), _react.default.createElement("div", {
        className: cx('content-wrapper')
      }, _react.default.createElement("h3", null, name), _react.default.createElement("p", null, "The disclosed component can disclose content within the same panel."), _react.default.createElement("p", null, "It can also render a header (like above) that implements the various DisclosureManager control functions."), _react.default.createElement("button", {
        type: "button",
        onClick: function onClick() {
          disclosureManager.dismiss().catch(function () {
            console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console
          });
        }
      }, "Dismiss"), _react.default.createElement("button", {
        type: "button",
        onClick: function onClick() {
          disclosureManager.disclose({
            preferredType: disclosureType,
            size: 'small',
            content: {
              key: "Nested ".concat(name),
              component: _react.default.createElement(DisclosureComponent, {
                name: "Nested ".concat(name),
                disclosureType: disclosureType
              })
            }
          });
        }
      }, "Disclose Again"), _react.default.createElement("br", null), _react.default.createElement("br", null), _react.default.createElement("p", null, "The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below."), _react.default.createElement("input", {
        "aria-label": "textArea",
        type: "text",
        onChange: function onChange(event) {
          _this3.setState({
            text: event.target.value
          });
        },
        value: this.state.text || ''
      }), this.state.text && this.state.text.length ? _react.default.createElement("p", null, "Component has unsaved changes!") : null, _react.default.createElement("br", null), _react.default.createElement("br", null), _react.default.createElement("p", null, "Selected Header Action:", ' ', _react.default.createElement("b", null, this.state.selectedHeaderAction))));
    }
  }]);
  return DisclosureComponent;
}(_react.default.Component);

DisclosureComponent.contextType = _terraDisclosureManager.DisclosureManagerContext;
DisclosureComponent.propTypes = {
  name: _propTypes.default.string,
  disclosureType: _propTypes.default.string
};
DisclosureComponent.defaultProps = {
  name: 'Disclosure Component'
};
var HEIGHT_KEYS = Object.keys(_terraDisclosureManager.availableDisclosureHeights);
var WIDTH_KEYS = Object.keys(_terraDisclosureManager.availableDisclosureWidths);

var generateDimensionOptions = function generateDimensionOptions(values) {
  return values.map(function (currentValue, index) {
    var keyValue = index;
    return _react.default.createElement("option", {
      key: keyValue,
      value: currentValue
    }, currentValue);
  });
};

var ContentComponent = /*#__PURE__*/function (_React$Component2) {
  (0, _inherits2.default)(ContentComponent, _React$Component2);

  function ContentComponent(props) {
    var _this4;

    (0, _classCallCheck2.default)(this, ContentComponent);
    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ContentComponent).call(this, props));
    _this4.renderButton = _this4.renderButton.bind((0, _assertThisInitialized2.default)(_this4));
    _this4.handleSelectChange = _this4.handleSelectChange.bind((0, _assertThisInitialized2.default)(_this4));
    _this4.getId = _this4.getId.bind((0, _assertThisInitialized2.default)(_this4));
    _this4.state = {
      id: 'dimensions',
      disclosureHeight: HEIGHT_KEYS[0],
      disclosureWidth: WIDTH_KEYS[0]
    };
    return _this4;
  }

  (0, _createClass2.default)(ContentComponent, [{
    key: "getId",
    value: function getId(name) {
      return name + this.state.id;
    }
  }, {
    key: "handleSelectChange",
    value: function handleSelectChange(event) {
      this.setState((0, _defineProperty2.default)({}, event.target.name, event.target.value));
    }
  }, {
    key: "renderButton",
    value: function renderButton(size) {
      var disclosureType = this.props.disclosureType;
      var disclosureManager = this.context;
      return _react.default.createElement("button", {
        type: "button",
        onClick: function onClick() {
          disclosureManager.disclose({
            preferredType: disclosureType,
            size: size,
            content: {
              key: "Content-Disclosure-".concat(size),
              component: _react.default.createElement(DisclosureComponent, {
                name: "Disclosure Component",
                disclosureType: disclosureType
              })
            }
          });
        }
      }, "Disclose (".concat(size, ")"));
    }
  }, {
    key: "renderFormButton",
    value: function renderFormButton() {
      var _this5 = this;

      var disclosureType = this.props.disclosureType;
      var disclosureManager = this.context;
      var name = "Disclose (".concat(this.state.disclosureHeight, ") x (").concat(this.state.disclosureWidth, ")");
      return _react.default.createElement("button", {
        type: "button",
        onClick: function onClick() {
          disclosureManager.disclose({
            preferredType: disclosureType,
            dimensions: {
              height: _this5.state.disclosureHeight,
              width: _this5.state.disclosureWidth
            },
            content: {
              key: 'Content-Disclosure-Dimensions',
              component: _react.default.createElement(DisclosureComponent, {
                name: "Disclosure Component",
                disclosureType: disclosureType
              })
            }
          });
        }
      }, name);
    }
  }, {
    key: "renderForm",
    value: function renderForm() {
      return _react.default.createElement("form", null, _react.default.createElement("label", {
        htmlFor: this.getId("disclosureHeight".concat(this.props.panelBehavior))
      }, "Pop Content Height"), _react.default.createElement("select", {
        id: this.getId("disclosureHeight".concat(this.props.panelBehavior)),
        name: "disclosureHeight",
        value: this.state.disclosureHeight,
        onChange: this.handleSelectChange
      }, generateDimensionOptions(HEIGHT_KEYS)), _react.default.createElement("br", null), _react.default.createElement("br", null), _react.default.createElement("label", {
        htmlFor: this.getId("disclosureWidth".concat(this.props.panelBehavior))
      }, "Pop Content Width"), _react.default.createElement("select", {
        id: this.getId("disclosureWidth".concat(this.props.panelBehavior)),
        name: "disclosureWidth",
        value: this.state.disclosureWidth,
        onChange: this.handleSelectChange
      }, generateDimensionOptions(WIDTH_KEYS)), _react.default.createElement("br", null), _react.default.createElement("br", null));
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_terraContentContainer.default, {
        header: _react.default.createElement(_terraActionHeader.default, {
          title: "SlidePanelManager Child Component"
        })
      }, _react.default.createElement("div", {
        className: cx('content-wrapper')
      }, this.renderButton('default'), this.renderButton('tiny'), this.renderButton('small'), this.renderButton('medium'), this.renderButton('large'), this.renderButton('huge'), this.renderButton('fullscreen'), _react.default.createElement("br", null), _react.default.createElement("p", null, "The child components can disclose content in the panel at various sizes."), _react.default.createElement("p", null, "The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.")), _react.default.createElement("div", {
        className: cx('content-wrapper')
      }, this.renderForm(), this.renderFormButton()));
    }
  }]);
  return ContentComponent;
}(_react.default.Component);

ContentComponent.contextType = _terraDisclosureManager.DisclosureManagerContext;
ContentComponent.propTypes = {
  disclosureType: _propTypes.default.string,
  panelBehavior: _propTypes.default.oneOf(['overlay', 'squish'])
};

var SlidePanelManagerExample = function SlidePanelManagerExample(_ref) {
  var behavior = _ref.behavior,
      showAccessory = _ref.showAccessory;
  return _react.default.createElement("div", {
    className: cx('example-wrapper')
  }, _react.default.createElement(_terraSlidePanelManager.default, {
    panelBehavior: behavior,
    disclosureAccessory: showAccessory ? _react.default.createElement("div", {
      className: cx('disclosure-accessory')
    }, "Disclosure Accessory") : undefined
  }, _react.default.createElement(ContentComponent, {
    panelBehavior: behavior,
    disclosureType: "panel"
  })));
};

SlidePanelManagerExample.propTypes = {
  behavior: _propTypes.default.string,
  showAccessory: _propTypes.default.bool
};
var _default = SlidePanelManagerExample;
/* eslint-disable max-classes-per-file */

exports.default = _default;