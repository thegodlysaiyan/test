"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _reactIntl = require("react-intl");

var _terraAvatar = _interopRequireDefault(require("terra-avatar"));

var _IconCaretDown = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretDown"));

var _IconRollup = _interopRequireDefault(require("terra-icon/lib/icon/IconRollup"));

var _helpers = require("../utils/helpers");

var _propTypes2 = require("../utils/propTypes");

var _UtilityMenuHeaderButtonModule = _interopRequireDefault(require("./UtilityMenuHeaderButton.module.scss"));

var cx = _bind.default.bind(_UtilityMenuHeaderButtonModule.default);

var propTypes = {
  /**
   * A configuration object with information pertaining to the application's user.
   */
  userConfig: _propTypes2.userConfigPropType,

  /**
   * A function executed upon selection of the button.
   */
  onClick: _propTypes.default.func,

  /**
   * A ref Object that will be provided a reference to the created button.
   */
  popupAnchorRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Element)
  }),

  /**
   * @private
   * Object containing intl APIs.
   */
  intl: _reactIntl.intlShape
};

var UtilityMenuHeaderButton = function UtilityMenuHeaderButton(_ref) {
  var userConfig = _ref.userConfig,
      onClick = _ref.onClick,
      popupAnchorRef = _ref.popupAnchorRef,
      intl = _ref.intl;
  var ariaLabel;
  var content;

  if (userConfig) {
    ariaLabel = intl.formatMessage({
      id: 'Terra.applicationNavigation.header.utilityButtonTitleUser'
    });
    content = _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
      className: cx('image')
    }, _react.default.createElement(_terraAvatar.default, {
      alt: userConfig.name,
      image: userConfig.imageSrc,
      initials: userConfig.initials,
      className: cx('avatar')
    })), _react.default.createElement("div", {
      className: cx('title')
    }, userConfig.name), _react.default.createElement(_IconCaretDown.default, {
      className: cx('caret-icon')
    }), _react.default.createElement("span", {
      className: cx('popup-anchor'),
      ref: popupAnchorRef
    }));
  } else {
    ariaLabel = intl.formatMessage({
      id: 'Terra.applicationNavigation.header.utilityButtonTitleNoUser'
    });
    content = _react.default.createElement("div", {
      className: cx('no-user-image')
    }, _react.default.createElement(_IconRollup.default, {
      className: cx('rollup-icon')
    }));
  }

  return _react.default.createElement("div", {
    role: "button",
    tabIndex: "0",
    className: cx('utility-button', {
      'no-user': !userConfig
    }),
    onClick: onClick,
    onKeyDown: (0, _helpers.generateKeyDownSelection)(onClick),
    onBlur: _helpers.enableFocusStyles,
    onMouseDown: _helpers.disableFocusStyles,
    ref: !userConfig ? popupAnchorRef : undefined,
    "aria-label": ariaLabel,
    "aria-haspopup": true,
    "data-focus-styles-enabled": true,
    "data-application-header-utility": true
  }, content);
};

UtilityMenuHeaderButton.propTypes = propTypes;

var _default = (0, _reactIntl.injectIntl)(UtilityMenuHeaderButton);

exports.default = _default;