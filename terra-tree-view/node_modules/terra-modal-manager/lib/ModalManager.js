"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.disclosureType = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _terraAbstractModal = _interopRequireDefault(require("terra-abstract-modal"));

var _terraActionHeader = _interopRequireDefault(require("terra-action-header"));

var _terraSlideGroup = _interopRequireDefault(require("terra-slide-group"));

var _terraDisclosureManager = _interopRequireWildcard(require("terra-disclosure-manager"));

var _terraContentContainer = _interopRequireDefault(require("terra-content-container"));

var _ModalManagerModule = _interopRequireDefault(require("./ModalManager.module.scss"));

var disclosureType = 'modal';
exports.disclosureType = disclosureType;

var cx = _bind.default.bind(_ModalManagerModule.default);

var propTypes = {
  /**
   * The components to be rendered in the body of the ModalManager. These components will receive the
   * disclosure capabilities through the DisclosureManger's context API.
   */
  children: _propTypes.default.node,

  /**
   * The component to render within the Modal above the disclosed content.
   */
  disclosureAccessory: _propTypes.default.element,

  /**
   * @private
   * The container to wrap the disclosed content. This should be provided from the application level.
   */
  withDisclosureContainer: _propTypes.default.func
};
var heightFromSize = {
  tiny: 240,
  small: 420,
  medium: 600,
  large: 870,
  huge: 960
};
var widthFromSize = {
  tiny: 320,
  small: 640,
  medium: 960,
  large: 1280,
  huge: 1600
};

var ModalManager = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ModalManager, _React$Component);

  function ModalManager(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ModalManager);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ModalManager).call(this, props));
    _this.renderModal = _this.renderModal.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(ModalManager, [{
    key: "renderModal",
    value: function renderModal(manager) {
      var _this$props = this.props,
          children = _this$props.children,
          disclosureAccessory = _this$props.disclosureAccessory,
          withDisclosureContainer = _this$props.withDisclosureContainer,
          customProps = (0, _objectWithoutProperties2.default)(_this$props, ["children", "disclosureAccessory", "withDisclosureContainer"]);
      var containerClassNames = cx(['container', customProps.className]);
      var classArray = ['modal-manager'];
      var isFullscreen = manager.disclosure.isMaximized || manager.disclosure.size === _terraDisclosureManager.availableDisclosureSizes.FULLSCREEN;

      if (!isFullscreen) {
        if (manager.disclosure.dimensions) {
          classArray.push("height-".concat(manager.disclosure.dimensions.height), "width-".concat(manager.disclosure.dimensions.width));
        } else if (manager.disclosure.size) {
          classArray.push("height-".concat(heightFromSize[manager.disclosure.size]), "width-".concat(widthFromSize[manager.disclosure.size]));
        }
      }

      var presentedDisclosureComponentKey = manager.disclosureComponentKeys[manager.disclosureComponentKeys.length - 1];
      var presentedDisclosureComponentData = manager.disclosureComponentData[presentedDisclosureComponentKey] || {};
      var headerDataForPresentedComponent = presentedDisclosureComponentData.headerAdapterData;
      return _react.default.createElement("div", (0, _extends2.default)({}, customProps, {
        className: containerClassNames
      }), manager.children.components, _react.default.createElement(_terraAbstractModal.default, {
        isOpen: manager.disclosure.isOpen,
        isFullscreen: isFullscreen,
        classNameModal: cx(classArray),
        onRequestClose: function onRequestClose() {
          manager.closeDisclosure();
        },
        closeOnEsc: true,
        closeOnOutsideClick: false,
        ariaLabel: "Modal"
      }, _react.default.createElement(_terraContentContainer.default, {
        fill: true,
        header: _react.default.createElement(_react.default.Fragment, null, headerDataForPresentedComponent ? _react.default.createElement(_terraActionHeader.default, {
          title: headerDataForPresentedComponent.title,
          onClose: manager.closeDisclosure,
          onBack: manager.disclosureComponentKeys.length > 1 ? manager.dismissPresentedComponent : undefined,
          onMaximize: manager.maximizeDisclosure,
          onMinimize: manager.minimizeDisclosure
        }, headerDataForPresentedComponent.collapsibleMenuView) : undefined, disclosureAccessory)
      }, _react.default.createElement(_terraSlideGroup.default, {
        items: manager.disclosure.components,
        isAnimated: !isFullscreen
      }))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          withDisclosureContainer = _this$props2.withDisclosureContainer,
          children = _this$props2.children;
      return _react.default.createElement(_terraDisclosureManager.default, {
        withDisclosureContainer: withDisclosureContainer,
        supportedDisclosureTypes: [disclosureType],
        render: this.renderModal,
        trapNestedDisclosureRequests: true
      }, children);
    }
  }]);
  return ModalManager;
}(_react.default.Component);

ModalManager.propTypes = propTypes;
var _default = ModalManager;
exports.default = _default;