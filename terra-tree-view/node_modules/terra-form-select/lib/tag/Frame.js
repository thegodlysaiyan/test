"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _reactIntl = require("react-intl");

var _lodash = _interopRequireDefault(require("lodash.uniqueid"));

var KeyCode = _interopRequireWildcard(require("keycode-js"));

var _Dropdown = _interopRequireDefault(require("../shared/_Dropdown"));

var _Menu = _interopRequireDefault(require("./Menu"));

var _FrameUtil = _interopRequireDefault(require("../shared/_FrameUtil"));

var _FrameModule = _interopRequireDefault(require("../shared/_Frame.module.scss"));

var _MenuUtil = _interopRequireDefault(require("../shared/_MenuUtil"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var cx = _bind.default.bind(_FrameModule.default);

var propTypes = {
  /**
   * Used to define a string that labels the select component to screen readers.
   */
  ariaLabel: _propTypes.default.string,

  /**
   * The select options.
   */
  children: _propTypes.default.node,

  /**
   * Whether the select is disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * The select display.
   */
  display: _propTypes.default.node,

  /**
   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )
   */
  // eslint-disable-next-line react/forbid-prop-types
  dropdownAttrs: _propTypes.default.object,

  /**
   * @private
   * The id of the input field.
   */
  inputId: _propTypes.default.string,

  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _reactIntl.intlShape.isRequired,

  /**
   * Whether the select displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,

  /**
   * Whether the select displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,

  /**
   * Ensure accessibility on touch devices. Will render the dropdown menu in
   * normal DOM flow with position absolute. By default, the menu renders in a
   * portal, which is inaccessible on touch devices.
   */
  isTouchAccessible: _propTypes.default.bool,

  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,

  /**
   * The maximum number of options that can be selected. A value less than 2 will be ignored.
   * Only applicable to variants allowing multiple selections (e.g.; `multiple`; `tag`).
   */
  maxSelectionCount: _propTypes.default.number,

  /**
   * Callback function triggered when an option is deselected.
   */
  onDeselect: _propTypes.default.func,

  /**
   * Callback function triggered when the frame loses focus.
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback function triggered when the frame gains focus.
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback function triggered when the search criteria changes.
   */
  onSearch: _propTypes.default.func,

  /**
   * Callback function triggered when an option is selected.
   */
  onSelect: _propTypes.default.func,

  /**
   * Callback function for option filtering. function(searchValue, option)
   */
  optionFilter: _propTypes.default.func,

  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,

  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,

  /**
   * Total number of options.
   */
  totalOptions: _propTypes.default.number,

  /**
   * The select value.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array])
};
var defaultProps = {
  disabled: false,
  dropdownAttrs: undefined,
  isIncomplete: false,
  isInvalid: false,
  isTouchAccessible: false,
  maxSelectionCount: undefined,
  onDeselect: undefined,
  onSearch: undefined,
  onSelect: undefined,
  optionFilter: undefined,
  placeholder: undefined,
  required: false,
  totalOptions: undefined,
  value: undefined,
  inputId: undefined
};
/* This rule can be removed when eslint-plugin-jsx-a11y is updated to ~> 6.0.0 */

/* eslint-disable jsx-a11y/no-static-element-interactions */

var Frame = /*#__PURE__*/function (_React$Component) {
  _inherits(Frame, _React$Component);

  _createClass(Frame, null, [{
    key: "shouldAddOptionOnBlur",
    value: function shouldAddOptionOnBlur(props, state) {
      var onSelect = props.onSelect;
      var hasSearchChanged = state.hasSearchChanged,
          searchValue = state.searchValue;

      if (!onSelect || !hasSearchChanged) {
        return false;
      }

      if (searchValue.trim().length > 0 && !_FrameUtil.default.includes(props, searchValue)) {
        return true;
      }

      return false;
    }
  }]);

  function Frame(props) {
    var _this;

    _classCallCheck(this, Frame);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Frame).call(this, props));
    _this.state = {
      focusedByTouch: false,
      isOpen: false,
      isFocused: false,
      isInputFocused: false,
      isPositioned: false,
      hasSearchChanged: false,
      searchValue: ''
    };
    _this.ariaLabel = _this.ariaLabel.bind(_assertThisInitialized(_this));
    _this.setInput = _this.setInput.bind(_assertThisInitialized(_this));
    _this.getDisplay = _this.getDisplay.bind(_assertThisInitialized(_this));
    _this.renderToggleButton = _this.renderToggleButton.bind(_assertThisInitialized(_this));
    _this.renderDescriptionText = _this.renderDescriptionText.bind(_assertThisInitialized(_this));
    _this.openDropdown = _this.openDropdown.bind(_assertThisInitialized(_this));
    _this.closeDropdown = _this.closeDropdown.bind(_assertThisInitialized(_this));
    _this.toggleDropdown = _this.toggleDropdown.bind(_assertThisInitialized(_this));
    _this.positionDropdown = _this.positionDropdown.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleSelect = _this.handleSelect.bind(_assertThisInitialized(_this));
    _this.handleSearch = _this.handleSearch.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleInputMouseDown = _this.handleInputMouseDown.bind(_assertThisInitialized(_this));
    _this.handleInputFocus = _this.handleInputFocus.bind(_assertThisInitialized(_this));
    _this.handleInputBlur = _this.handleInputBlur.bind(_assertThisInitialized(_this));
    _this.handleToggleMouseDown = _this.handleToggleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleToggleButtonMouseDown = _this.handleToggleButtonMouseDown.bind(_assertThisInitialized(_this));
    _this.handleTouchStart = _this.handleTouchStart.bind(_assertThisInitialized(_this));
    _this.role = _this.role.bind(_assertThisInitialized(_this));
    _this.visuallyHiddenComponent = _react.default.createRef();
    _this.selectMenu = '#terra-select-menu';
    return _this;
  }

  _createClass(Frame, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(previousProps, previousState) {
      if (_FrameUtil.default.shouldPositionDropdown(previousState, this.state, this.dropdown)) {
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(this.positionDropdown, !previousState.isOpen ? 0 : 100);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.debounceTimer);
    }
  }, {
    key: "setInput",
    value: function setInput(input) {
      this.input = input;
    }
  }, {
    key: "getDisplay",
    value: function getDisplay(displayId, ariaDescribedBy) {
      var _this$state = this.state,
          searchValue = _this$state.searchValue,
          isFocused = _this$state.isFocused;
      var _this$props = this.props,
          disabled = _this$props.disabled,
          display = _this$props.display,
          placeholder = _this$props.placeholder,
          required = _this$props.required,
          value = _this$props.value,
          inputId = _this$props.inputId;
      var isHidden = !isFocused && value && value.length > 0;
      var inputAttrs = {
        disabled: disabled,
        placeholder: placeholder,
        ref: this.setInput,
        onChange: this.handleSearch,
        onFocus: this.handleInputFocus,
        onBlur: this.handleInputBlur,
        onMouseDown: this.handleInputMouseDown,
        'aria-label': this.ariaLabel(),
        'aria-describedby': "".concat(displayId, " ").concat(ariaDescribedBy),
        'aria-disabled': disabled,
        'aria-owns': this.state.isOpen ? 'terra-select-menu' : undefined,
        type: 'text',
        className: cx('search-input', {
          'is-hidden': isHidden
        }),
        required: required && !display.length ? true : undefined,
        id: inputId,
        'aria-required': required && !display.length
      };
      return _react.default.createElement("ul", {
        className: cx('content')
      }, display && display.length > 0 ? _react.default.createElement("li", null, _react.default.createElement("ul", {
        id: displayId,
        className: cx('display-content')
      }, display, _react.default.createElement("li", {
        className: cx('visually-hidden-component')
      }, _react.default.createElement(_reactIntl.FormattedMessage, {
        id: "Terra.form.select.selected"
      })))) : null, _react.default.createElement("li", {
        className: cx('search-wrapper')
      }, _react.default.createElement("input", _extends({}, inputAttrs, {
        value: searchValue
      }))));
    }
    /**
     * Closes the dropdown.
     */

  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setState({
        isAbove: false,
        isFocused: document.activeElement === this.input || document.activeElement === this.select,
        isOpen: false,
        isPositioned: false,
        hasSearchChanged: false,
        searchValue: ''
      }); // 'Tag' and 'Combobox' variants select the current search value when the component loses focus.

      var searchValue = this.state.searchValue;

      if (Frame.shouldAddOptionOnBlur(this.props, this.state)) {
        // NOTE: Since 'Combobox' does not allow blank strings to be created within the options dropdown,
        // a blank input string should be explicitly converted into an empty string. This ensures that
        // on blur, Combobox updates the search field to be an empty string when the user inputs a blank string.
        // Upon failing to do so, Combobox resets the search field back to a previously selected value.
        var freeText = searchValue.trim().length === 0 ? '' : searchValue;

        if (this.props.onSelect) {
          this.props.onSelect(freeText);
        }
      }
    }
    /**
     * Opens the dropdown.
     */

  }, {
    key: "openDropdown",
    value: function openDropdown(event) {
      var _this2 = this;

      if (this.state.isOpen || this.props.disabled) {
        return;
      }
      /**
       * Avoids focusing the input if the toggle button is used to open the select menu.
       * This is to avoid an issue with VoiceOver on iOS where shifting to toggle button while the
       * input is focused / onScreen keyboard is open unexpected focus shift when the onScreen
       * keyboard is closed
       */


      if (event && event.target && (event.target.hasAttribute('data-terra-form-select-toggle-button') || event.target.hasAttribute('data-terra-form-select-toggle-button-icon'))) {
        this.setState({
          isOpen: true,
          isPositioned: false
        }); // Allows time for state update to render select menu DOM before shifting focus to it

        setTimeout(function () {
          if (document.querySelector(_this2.selectMenu)) {
            document.querySelector(_this2.selectMenu).focus();
          }
        }, 10);
        return;
      }

      if (this.input) {
        this.input.focus();
      } else {
        // Allows time for state update to render select menu DOM before shifting focus to it
        setTimeout(function () {
          if (document.querySelector(_this2.selectMenu)) {
            document.querySelector(_this2.selectMenu).focus();
          }
        }, 10);
      }

      this.setState({
        isOpen: true,
        isPositioned: false
      });
    }
    /**
     * Positions the dropdown to utilize the most available space.
     */

  }, {
    key: "positionDropdown",
    value: function positionDropdown() {
      if (!this.state.isOpen) {
        return;
      }

      var _this$props2 = this.props,
          dropdownAttrs = _this$props2.dropdownAttrs,
          maxHeight = _this$props2.maxHeight,
          isTouchAccessible = _this$props2.isTouchAccessible;
      this.setState(_FrameUtil.default.dropdownPosition(dropdownAttrs, this.select, this.dropdown, maxHeight, isTouchAccessible));
    }
    /**
     * Handles the blur event.
     */

  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      var relatedTarget = event.relatedTarget;
      var focusedByTouch = this.state.focusedByTouch; // The check for dropdown.contains(activeElement) is necessary to prevent IE11 from closing dropdown on click of scrollbar in certain contexts.

      if (this.dropdown && this.dropdown === document.activeElement && this.dropdown.contains(document.activeElement)) {
        return;
      } // Don't blur if we dismissed the onscreen keyboard
      // Determined by if we have have interacted with the frame via onTouchStart
      // and if the relatedTarget is falsey. The relatedTarget will be null when
      // dismissing the onscreen keyboard, else set to another element when
      // tapping elsewhere on the page


      if (focusedByTouch && !relatedTarget) {
        return;
      }

      this.setState({
        isFocused: false,
        focusedByTouch: false
      });
      this.closeDropdown();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
    /**
     * Handles the focus event.
     */

  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }

      if (this.props.onFocus && !this.state.isFocused) {
        this.props.onFocus(event);
      }

      this.setState({
        isFocused: true
      });
    }
    /**
     * Manages keyboard interactions and accessibility.
     * @param {event} event - The onKeyDown event.
     */

  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var _this$props3 = this.props,
          children = _this$props3.children,
          intl = _this$props3.intl,
          onDeselect = _this$props3.onDeselect,
          value = _this$props3.value;
      var keyCode = event.keyCode,
          target = event.target;

      if (keyCode === KeyCode.KEY_SPACE && target !== this.input) {
        event.preventDefault();
        this.openDropdown(event);
      } else if (keyCode === KeyCode.KEY_UP || keyCode === KeyCode.KEY_DOWN) {
        event.preventDefault();
        this.openDropdown(event);
      } else if (keyCode === KeyCode.KEY_BACK_SPACE && !this.state.searchValue && value.length > 0) {
        var lastOptionValue = value[value.length - 1];

        var lastOption = _MenuUtil.default.findByValue(children, lastOptionValue);

        var lastOptionDisplay = lastOption ? lastOption.props.display : lastOptionValue;

        if (this.visuallyHiddenComponent && this.visuallyHiddenComponent.current) {
          this.visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.unselectedText'
          }, {
            text: lastOptionDisplay
          });
        }

        if (onDeselect) {
          onDeselect(lastOptionValue);
        }
      } else if (keyCode === KeyCode.KEY_ESCAPE) {
        this.closeDropdown();
      }
    }
    /**
     * Handles the mouse down events.
     * @param {event} event - The mouse down event.
     */

  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      // Preventing default events stops the search input from losing focus.
      // The default variant has no search input therefore the mouse down gives the component focus.
      event.preventDefault();
      this.openDropdown(event);
    }
    /**
     * Handles the input mouse down events.
     * @param {event} event - The mouse down event.
     */

  }, {
    key: "handleInputMouseDown",
    value: function handleInputMouseDown(event) {
      event.stopPropagation();
      this.openDropdown(event);
    }
    /**
     * Handles the input focus event.
     */

  }, {
    key: "handleInputFocus",
    value: function handleInputFocus() {
      this.setState({
        isInputFocused: true
      });
    }
    /**
     * Handles the input blur event.
     */

  }, {
    key: "handleInputBlur",
    value: function handleInputBlur() {
      this.setState({
        isInputFocused: false
      });
    }
    /**
     * Handles the toggle mouse down events.
     */

  }, {
    key: "handleToggleMouseDown",
    value: function handleToggleMouseDown() {
      if (this.state.isOpen) {
        this.closeDropdown();
      }
    }
    /**
     * Handles the toggle button mouse down events.
     */

  }, {
    key: "handleToggleButtonMouseDown",
    value: function handleToggleButtonMouseDown() {
      if (this.state.isOpen) {
        this.closeDropdown();

        if (this.input) {
          this.input.focus();
        }
      }
    }
    /**
     * Handles the touch start events
     */

  }, {
    key: "handleTouchStart",
    value: function handleTouchStart() {
      this.setState({
        focusedByTouch: true
      });
    }
    /**
     * Handles changes to the search value.
     * @param {event} event - The input change event.
     */

  }, {
    key: "handleSearch",
    value: function handleSearch(event) {
      var searchValue = event.target.value;
      this.setState({
        isOpen: true,
        hasSearchChanged: true,
        searchValue: searchValue
      });

      if (this.props.onSearch) {
        this.props.onSearch(searchValue);
      }
    }
    /**
     * Handles the request to select an option.
     * @param {string|number} value - The value of the selected option.
     * @param {ReactNode} option - The option that was selected.
     */

  }, {
    key: "handleSelect",
    value: function handleSelect(value, option) {
      this.setState({
        searchValue: '',
        hasSearchChanged: false,
        isOpen: true
      });

      if (this.props.onSelect) {
        this.props.onSelect(value, option);
      }
    }
    /**
     * Toggles the dropdown open or closed.
     */

  }, {
    key: "toggleDropdown",
    value: function toggleDropdown(event) {
      if (this.state.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown(event);
      }
    }
    /**
     * Determines compatible aria-label string based on if one is provided via props
     * Falls back to the string 'Search' if no label is provided
     */

  }, {
    key: "ariaLabel",
    value: function ariaLabel() {
      var _this$props4 = this.props,
          ariaLabel = _this$props4.ariaLabel,
          disabled = _this$props4.disabled,
          intl = _this$props4.intl;
      var defaultAriaLabel = intl.formatMessage({
        id: 'Terra.form.select.ariaLabel'
      });
      var dimmed = intl.formatMessage({
        id: 'Terra.form.select.dimmed'
      }); // VO on iOS doesn't do a good job of announcing disabled stated. Here we append the phrase that
      // VO associates with disabled form controls.

      if ('ontouchstart' in window && disabled) {
        return ariaLabel === undefined ? "".concat(defaultAriaLabel, " ").concat(dimmed) : "".concat(ariaLabel, " ").concat(dimmed);
      }

      return ariaLabel === undefined ? defaultAriaLabel : ariaLabel;
    }
    /**
     * Determines compatible role attribute to apply to select based on active variant and disabled prop
     */

  }, {
    key: "role",
    value: function role() {
      var disabled = this.props.disabled; // role="application" needed to allow JAWS to work correctly with the select and use our key event listeners

      return disabled ? undefined : 'application';
    }
    /**
     * Renders descriptive text related to the select component to be available for screen readers
     */

  }, {
    key: "renderDescriptionText",
    value: function renderDescriptionText() {
      var _this$props5 = this.props,
          intl = _this$props5.intl,
          totalOptions = _this$props5.totalOptions;
      var listOfOptionsTxt = intl.formatMessage({
        id: 'Terra.form.select.listOfTotalOptions'
      }, {
        total: totalOptions
      });
      var mobileUsageGuidanceTxt = intl.formatMessage({
        id: 'Terra.form.select.mobileUsageGuidance'
      });
      var multiSelectUsageGuidanceTxt = intl.formatMessage({
        id: 'Terra.form.select.multiSelectUsageGuidance'
      });

      if ('ontouchstart' in window) {
        if (this.state.isInputFocused) {
          return "".concat(listOfOptionsTxt);
        }

        return "".concat(listOfOptionsTxt, " ").concat(mobileUsageGuidanceTxt);
      }

      return "".concat(listOfOptionsTxt, " ").concat(multiSelectUsageGuidanceTxt);
    }
  }, {
    key: "renderToggleButton",
    value: function renderToggleButton() {
      var _this$props6 = this.props,
          intl = _this$props6.intl,
          isInvalid = _this$props6.isInvalid;
      var mobileButtonUsageGuidanceTxt = intl.formatMessage({
        id: 'Terra.form.select.mobileButtonUsageGuidance'
      });
      /**
       * Devices that support ontouchstart trigger an onScreen keyboard when inputs are focused and
       * need customized rendering to avoid issues when used with a screen reader.
       */

      if ('ontouchstart' in window) {
        /**
         * When the input within the select is focused, we don't want to render the toggle button that
         * shifts focus to the select menu as it causes issues when using VoiceOver on iOS.
         * Always rendering the toggle button allows the users to shift the virtual indicator to the
         * toggle button and tap on it which shifts focus to the select menu dropdown. When this
         * happens on iOS, the onScreen keyboard will close and shift focus back to the input which
         * prevents users from ever navigating through the select options.
         */
        if (this.state.isInputFocused) {
          var _toggleClasses2 = cx(['toggle', {
            'is-invalid': isInvalid
          }]);

          return _react.default.createElement("div", {
            "data-terra-form-select-toggle": true,
            className: _toggleClasses2,
            onMouseDown: this.handleToggleMouseDown
          }, _react.default.createElement("span", {
            className: cx('arrow-icon')
          }));
        }

        var _toggleClasses = cx(['toggle', 'toggle-narrow', {
          'is-invalid': isInvalid
        }]);
        /**
         * Toggle button enables shifting focus to dropdown. This allows iOS users that are using
         * VoiceOver the ability to navigate to the select options.
         */


        return _react.default.createElement("div", {
          className: _toggleClasses
        }, _react.default.createElement("button", {
          type: "button",
          className: cx('toggle-btn'),
          "aria-label": mobileButtonUsageGuidanceTxt,
          "data-terra-form-select-toggle-button": true,
          onMouseDown: this.handleToggleButtonMouseDown
        }, _react.default.createElement("span", {
          className: cx('arrow-icon'),
          "data-terra-form-select-toggle-button-icon": true
        })));
      }

      var toggleClasses = cx(['toggle', {
        'is-invalid': isInvalid
      }]);
      return _react.default.createElement("div", {
        "data-terra-form-select-toggle": true,
        className: toggleClasses,
        onMouseDown: this.toggleDropdown
      }, _react.default.createElement("span", {
        className: cx('arrow-icon')
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props7 = this.props,
          ariaLabel = _this$props7.ariaLabel,
          children = _this$props7.children,
          disabled = _this$props7.disabled,
          display = _this$props7.display,
          dropdownAttrs = _this$props7.dropdownAttrs,
          intl = _this$props7.intl,
          inputId = _this$props7.inputId,
          isIncomplete = _this$props7.isIncomplete,
          isTouchAccessible = _this$props7.isTouchAccessible,
          isInvalid = _this$props7.isInvalid,
          maxHeight = _this$props7.maxHeight,
          maxSelectionCount = _this$props7.maxSelectionCount,
          onDeselect = _this$props7.onDeselect,
          onSearch = _this$props7.onSearch,
          onSelect = _this$props7.onSelect,
          optionFilter = _this$props7.optionFilter,
          placeholder = _this$props7.placeholder,
          required = _this$props7.required,
          totalOptions = _this$props7.totalOptions,
          value = _this$props7.value,
          customProps = _objectWithoutProperties(_this$props7, ["ariaLabel", "children", "disabled", "display", "dropdownAttrs", "intl", "inputId", "isIncomplete", "isTouchAccessible", "isInvalid", "maxHeight", "maxSelectionCount", "onDeselect", "onSearch", "onSelect", "optionFilter", "placeholder", "required", "totalOptions", "value"]);

      var selectClasses = cx(['select', 'tag', {
        'is-above': this.state.isAbove
      }, {
        'is-disabled': disabled
      }, {
        'is-focused': this.state.isFocused
      }, {
        'is-invalid': isInvalid
      }, {
        'is-incomplete': isIncomplete && required && !isInvalid
      }, {
        'is-open': this.state.isOpen
      }, customProps.className]);
      var labelId = "terra-select-screen-reader-label-".concat((0, _lodash.default)());
      var displayId = "terra-select-screen-reader-display-".concat((0, _lodash.default)());
      var descriptionId = "terra-select-screen-reader-description-".concat((0, _lodash.default)());
      var customAriaDescribedbyIds = customProps['aria-describedby'];
      var ariaDescribedBy = customAriaDescribedbyIds ? "".concat(descriptionId, " ").concat(customAriaDescribedbyIds) : descriptionId;
      var menuProps = {
        value: value,
        onDeselect: onDeselect,
        optionFilter: optionFilter,
        visuallyHiddenComponent: this.visuallyHiddenComponent,
        onSelect: this.handleSelect,
        onRequestClose: this.closeDropdown,
        searchValue: this.state.searchValue,
        input: this.input,
        select: this.select,
        maxSelectionCount: maxSelectionCount
      };
      return _react.default.createElement("div", _extends({}, customProps, {
        role: this.role(),
        "data-terra-select-combobox": true,
        "aria-controls": !disabled && this.state.isOpen ? 'terra-select-menu' : undefined,
        "aria-disabled": !!disabled,
        "aria-expanded": !!disabled && !!this.state.isOpen,
        "aria-haspopup": !disabled ? 'true' : undefined,
        "aria-describedby": ariaDescribedBy,
        "aria-owns": this.state.isOpen ? 'terra-select-menu' : undefined,
        className: selectClasses,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleTouchStart,
        tabIndex: "-1",
        ref: function ref(select) {
          _this3.select = select;
        }
      }), _react.default.createElement("div", {
        className: cx('visually-hidden-component'),
        hidden: true
      }, _react.default.createElement("span", {
        id: labelId
      }, this.ariaLabel()), _react.default.createElement("span", {
        id: descriptionId
      }, this.renderDescriptionText())), _react.default.createElement("div", {
        className: cx('display')
      }, this.getDisplay(displayId, ariaDescribedBy)), this.renderToggleButton(), _react.default.createElement("span", {
        "aria-atomic": "true",
        "aria-live": "assertive",
        "aria-relevant": "additions text",
        className: cx('visually-hidden-component'),
        ref: this.visuallyHiddenComponent
      }), this.state.isOpen && _react.default.createElement(_Dropdown.default, _extends({}, dropdownAttrs, {
        id: this.state.isOpen ? 'terra-select-dropdown' : undefined,
        target: this.select,
        isAbove: this.state.isAbove,
        isTouchAccessible: isTouchAccessible,
        isEnabled: this.state.isPositioned,
        onResize: this.positionDropdown,
        refCallback: function refCallback(ref) {
          _this3.dropdown = ref;
        },
        style: _FrameUtil.default.dropdownStyle(dropdownAttrs, this.state) // eslint-disable-line react/forbid-component-props

      }), _react.default.createElement(_Menu.default, menuProps, children)));
    }
  }]);

  return Frame;
}(_react.default.Component);

Frame.propTypes = propTypes;
Frame.defaultProps = defaultProps;

var _default = (0, _reactIntl.injectIntl)(Frame);

exports.default = _default;