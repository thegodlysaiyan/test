"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _variants = _interopRequireDefault(require("./shared/_variants"));

var _Option = _interopRequireDefault(require("./shared/_Option"));

var _OptGroup = _interopRequireDefault(require("./shared/_OptGroup"));

var _Combobox = _interopRequireDefault(require("./Combobox"));

var _SingleSelect = _interopRequireDefault(require("./SingleSelect"));

var _MultiSelect = _interopRequireDefault(require("./MultiSelect"));

var _SearchSelect = _interopRequireDefault(require("./SearchSelect"));

var _TagSelect = _interopRequireDefault(require("./TagSelect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  /**
   * Whether a clear option is available to clear the selection, will use placeholder text if provided.
   * This is not applicable to the `multiple` or `tag` variants since the selection can already be deselected using the tag.
   */
  allowClear: _propTypes.default.bool,

  /**
   * The dropdown menu options.
   */
  children: _propTypes.default.node,

  /**
   * The default selected value. Can be a string, number, or array of strings/numbers.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),

  /**
   * Whether the select is disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )
   */
  // eslint-disable-next-line react/forbid-prop-types
  dropdownAttrs: _propTypes.default.object,

  /**
   * Whether the select displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,

  /**
   * Whether the select displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,

  /**
   * Ensure accessibility on touch devices. Will render the dropdown menu in
   * normal DOM flow with position absolute. By default, the menu renders in a
   * portal, which is inaccessible on touch devices. Only applicable to variants
   * that include an input (e.g. `combobox`, `multiple`, `search`, and `tag`).
   */
  isTouchAccessible: _propTypes.default.bool,

  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,

  /**
   * @private The maximum number of options that can be selected. A value less than 2 will be ignored.
   * Only applicable to variants allowing multiple selections (e.g.; `multiple`; `tag`).
   */
  maxSelectionCount: _propTypes.default.number,

  /**
   * Content to display when no results are found.
   */
  noResultContent: _propTypes.default.node,

  /**
   * Callback function triggered when the select loses focus. function(event)
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback function triggered when the value changes. function(value)
   */
  onChange: _propTypes.default.func,

  /**
   * Callback function triggered when the select is clicked. function(event)
   */
  onClick: _propTypes.default.func,

  /**
   * Callback function triggered when an option is deselected. function(value)
   */
  onDeselect: _propTypes.default.func,

  /**
   * Callback function triggered when the select receives focus. function(event)
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback function triggered when the search criteria changes. function(searchValue)
   */
  onSearch: _propTypes.default.func,

  /**
   * Callback function triggered when an option is selected. function(value)
   */
  onSelect: _propTypes.default.func,

  /**
   * Callback function invoked for each option on search change. function(searchValue, option)
   */
  optionFilter: _propTypes.default.func,

  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,

  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,

  /**
   * The selected value. Can be a string, number, or array of strings/numbers.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),

  /**
   * The behavior of the select. One of `default`, `combobox`, `multiple`, `tag`, or `search`.
   */
  variant: _propTypes.default.oneOf([_variants.default.COMBOBOX, _variants.default.DEFAULT, _variants.default.MULTIPLE, _variants.default.SEARCH, _variants.default.TAG])
};
var defaultProps = {
  allowClear: false,
  children: undefined,
  defaultValue: undefined,
  disabled: false,
  dropdownAttrs: undefined,
  isIncomplete: false,
  isInvalid: false,
  isTouchAccessible: false,
  maxSelectionCount: undefined,
  noResultContent: undefined,
  onChange: undefined,
  onDeselect: undefined,
  onSearch: undefined,
  onSelect: undefined,
  optionFilter: undefined,
  placeholder: undefined,
  required: false,
  value: undefined,
  variant: 'default'
};

function Select(props) {
  var variant = props.variant,
      otherProps = _objectWithoutProperties(props, ["variant"]);

  switch (variant) {
    case _variants.default.COMBOBOX:
      {
        var maxSelectionCount = otherProps.maxSelectionCount,
            comboboxProps = _objectWithoutProperties(otherProps, ["maxSelectionCount"]);

        return _react.default.createElement(_Combobox.default, comboboxProps);
      }

    case _variants.default.MULTIPLE:
      {
        var allowClear = otherProps.allowClear,
            multipleProps = _objectWithoutProperties(otherProps, ["allowClear"]);

        return _react.default.createElement(_MultiSelect.default, multipleProps);
      }

    case _variants.default.SEARCH:
      {
        var _maxSelectionCount = otherProps.maxSelectionCount,
            searchProps = _objectWithoutProperties(otherProps, ["maxSelectionCount"]);

        return _react.default.createElement(_SearchSelect.default, searchProps);
      }

    case _variants.default.TAG:
      {
        var noResultContent = otherProps.noResultContent,
            _allowClear = otherProps.allowClear,
            tagProps = _objectWithoutProperties(otherProps, ["noResultContent", "allowClear"]);

        return _react.default.createElement(_TagSelect.default, tagProps);
      }

    case _variants.default.DEFAULT:
    default:
      {
        var isTouchAccessible = otherProps.isTouchAccessible,
            _maxSelectionCount2 = otherProps.maxSelectionCount,
            onSearch = otherProps.onSearch,
            optionFilter = otherProps.optionFilter,
            singleSelectProps = _objectWithoutProperties(otherProps, ["isTouchAccessible", "maxSelectionCount", "onSearch", "optionFilter"]);

        return _react.default.createElement(_SingleSelect.default, singleSelectProps);
      }
  }
}

Select.Option = _Option.default;
Select.OptGroup = _OptGroup.default;
Select.propTypes = propTypes;
Select.defaultProps = defaultProps;
Select.isSelect = true;
var _default = Select;
exports.default = _default;