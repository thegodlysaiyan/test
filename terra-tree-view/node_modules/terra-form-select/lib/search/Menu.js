"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _reactIntl = require("react-intl");

var KeyCode = _interopRequireWildcard(require("keycode-js"));

var _ClearOption = _interopRequireDefault(require("../shared/_ClearOption"));

var _NoResults = _interopRequireDefault(require("../shared/_NoResults"));

var _MenuUtil = _interopRequireDefault(require("../shared/_MenuUtil"));

var _SharedUtil = _interopRequireDefault(require("../shared/_SharedUtil"));

var _MenuModule = _interopRequireDefault(require("../shared/_Menu.module.scss"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var cx = _bind.default.bind(_MenuModule.default);
/* Disabling this rule because props used in getDerivedStateFromProps return false positives. */

/* eslint-disable react/no-unused-prop-types */


var propTypes = {
  /**
   * The content of the menu.
   */
  children: _propTypes.default.node,

  /**
   * Select element ref.
   */
  select: _propTypes.default.instanceOf(Element),

  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _reactIntl.intlShape.isRequired,

  /**
   * Input element ref used in select component.
   */
  input: _propTypes.default.instanceOf(Element),

  /**
   * Text for the clear option.
   */
  clearOptionDisplay: _propTypes.default.string,

  /**
   * Content to display when no results are found.
   */
  noResultContent: _propTypes.default.node,

  /**
   * Callback function triggered when an option is deselected.
   */
  onDeselect: _propTypes.default.func,

  /**
   * Callback function triggered when an option is selected.
   */
  onSelect: _propTypes.default.func.isRequired,

  /**
   * Callback function for option filtering. function(searchValue, option)
   */
  optionFilter: _propTypes.default.func,

  /**
   * The search value to filter the available options.
   */
  searchValue: _propTypes.default.string,

  /**
   * The value of the selected options.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),

  /**
   * @private Visually hidden component designed to feed screen reader text to read.
   */
  visuallyHiddenComponent: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Element)
  })
};
var defaultProps = {
  children: undefined,
  input: undefined,
  clearOptionDisplay: undefined,
  noResultContent: undefined,
  onDeselect: undefined,
  optionFilter: undefined,
  searchValue: undefined,
  select: undefined,
  visuallyHiddenComponent: undefined,
  value: undefined
};

var Menu = /*#__PURE__*/function (_React$Component) {
  _inherits(Menu, _React$Component);

  function Menu(props) {
    var _this;

    _classCallCheck(this, Menu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Menu).call(this, props));
    _this.state = {};
    _this.clearScrollTimeout = _this.clearScrollTimeout.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_assertThisInitialized(_this));
    _this.handleOptionClick = _this.handleOptionClick.bind(_assertThisInitialized(_this));
    _this.scrollIntoView = _this.scrollIntoView.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * Updates the component state when new props are received.
   * @param {Object} props - The received props.
   * @param {Object} state - The current state of the component.
   * @return {Object} - The new state object.
   */


  _createClass(Menu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('keydown', this.handleKeyDown);
      this.scrollIntoView();
      /**
       * Without this detection for ontouchstart and the early return, VoiceOver on iOS will read the
       * first option twice when the menu is opened. First due to aria-live update in componentDidMount
       * and another time because we shift focus to the dropdown and VoiceOver on iOS will read the
       * first option in the dropdown. To mitigate this, the following conditional
       * check opts-out of the aria-live update if browser supports ontouchstart which iOS supports.
       */

      if ('ontouchstart' in window) return;
      this.updateCurrentActiveScreenReader();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateNoResultsScreenReader();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearScrollTimeout();

      if (this.state.closedViaKeyEvent) {
        if (this.props.input) {
          this.props.input.focus();
        }
      }

      document.removeEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "isActiveSelected",
    value: function isActiveSelected() {
      return this.state.active === this.props.value;
    }
  }, {
    key: "updateNoResultsScreenReader",
    value: function updateNoResultsScreenReader() {
      var _this2 = this;

      if (this.liveRegionTimeOut) {
        clearTimeout(this.liveRegionTimeOut);
      }

      this.liveRegionTimeOut = setTimeout(function () {
        var hasNoResults = _this2.state.hasNoResults;
        var _this2$props = _this2.props,
            intl = _this2$props.intl,
            visuallyHiddenComponent = _this2$props.visuallyHiddenComponent,
            searchValue = _this2$props.searchValue; // Race condition can occur between calling timeout and unmounting this component.

        if (!visuallyHiddenComponent || !visuallyHiddenComponent.current) {
          return;
        }

        if (hasNoResults) {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.noResults'
          }, {
            text: searchValue
          });
        } else {
          visuallyHiddenComponent.current.innerText = '';
        }
      }, 1000);
    }
  }, {
    key: "updateCurrentActiveScreenReader",
    value: function updateCurrentActiveScreenReader() {
      var _this$props = this.props,
          intl = _this$props.intl,
          clearOptionDisplay = _this$props.clearOptionDisplay,
          visuallyHiddenComponent = _this$props.visuallyHiddenComponent;
      var clearSelectTxt = intl.formatMessage({
        id: 'Terra.form.select.clearSelect'
      });

      if (this.menu !== null && this.state.active !== null) {
        this.menu.setAttribute('aria-activedescendant', "terra-select-option-".concat(this.state.active));
      } // Announces options to screen readers as user navigates through them via keyboard


      if (!visuallyHiddenComponent || !visuallyHiddenComponent.current) {
        return;
      } // Detects if option is clear option and provides accessible text


      if (clearOptionDisplay) {
        var active = this.menu.querySelector('[data-select-active]');

        if (active && active.hasAttribute('data-terra-select-clear-option')) {
          visuallyHiddenComponent.current.innerText = clearSelectTxt;
        }
      }

      var optGroupElement = _MenuUtil.default.getOptGroupElement(this.props.children, this.state.active);

      var element = _MenuUtil.default.findByValue(this.props.children, this.state.active);

      var displayText;

      if (optGroupElement) {
        displayText = intl.formatMessage({
          id: 'Terra.form.select.optGroup'
        }, {
          text: "".concat(optGroupElement.props.label, ", ").concat(element.props.display)
        });
      } else if (element) {
        displayText = element.props.display;
      }

      if (element) {
        if (element.props.display === '' && element.props.value === '') {
          // Used for case where users selects clear option and opens
          // dropdown again and navigates to clear option
          visuallyHiddenComponent.current.innerText = clearSelectTxt;
        } else if (this.isActiveSelected()) {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.selectedText'
          }, {
            text: displayText
          });
        } else {
          visuallyHiddenComponent.current.innerText = displayText;
        }
      }
    }
    /**
     * Clears the scroll timeout.
     */

  }, {
    key: "clearScrollTimeout",
    value: function clearScrollTimeout() {
      clearTimeout(this.scrollTimeout);
      this.scrollTimeout = null;
    }
    /**
     * Clones the menu content with the necessary events.
     * @param {ReactNode} object - The node being cloned.
     * @return {array} - A cloned copy of the object.
     */

  }, {
    key: "clone",
    value: function clone(object) {
      var _this3 = this;

      return _react.default.Children.map(object, function (option) {
        if (option.type.isOption) {
          return _react.default.cloneElement(option, _objectSpread({
            id: "terra-select-option-".concat(option.props.value),
            isActive: option.props.value === _this3.state.active,
            isCheckable: false,
            isSelected: _MenuUtil.default.isSelected(_this3.props.value, option.props.value),
            variant: 'search',
            onMouseDown: function onMouseDown() {
              _this3.downOption = option;
            },
            onMouseUp: function onMouseUp(event) {
              return _this3.handleOptionClick(event, option);
            },
            onMouseEnter: function onMouseEnter(event) {
              return _this3.handleMouseEnter(event, option);
            }
          }, option.props.value === _this3.state.active && {
            'data-select-active': true
          }));
        }

        if (option.type.isOptGroup) {
          return _react.default.cloneElement(option, {}, _this3.clone(option.props.children));
        }

        return option;
      });
    }
    /**
     * Handles keyboard interactions within the dropdown.
     * @param {event} event - The key down event.
     */

  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      var _this$state = this.state,
          active = _this$state.active,
          children = _this$state.children;
      var _this$props2 = this.props,
          intl = _this$props2.intl,
          onSelect = _this$props2.onSelect;
      var selectedTxt = intl.formatMessage({
        id: 'Terra.form.select.selected'
      });

      if (keyCode === KeyCode.KEY_UP) {
        this.clearScrollTimeout();
        this.scrollTimeout = setTimeout(this.clearScrollTimeout, 500);
        this.setState({
          active: _MenuUtil.default.findPrevious(children, active)
        }, this.scrollIntoView);
        this.updateCurrentActiveScreenReader();
      } else if (keyCode === KeyCode.KEY_DOWN) {
        this.clearScrollTimeout();
        this.scrollTimeout = setTimeout(this.clearScrollTimeout, 500);
        this.setState({
          active: _MenuUtil.default.findNext(children, active)
        }, this.scrollIntoView);
        this.updateCurrentActiveScreenReader();
      } else if (keyCode === KeyCode.KEY_RETURN && active !== null) {
        event.preventDefault();
        this.setState({
          closedViaKeyEvent: true
        });

        var option = _MenuUtil.default.findByValue(children, active); // Handles communicating the case where a clear option is selected to screen readers


        if (this.props.clearOptionDisplay) {
          var activeOption = this.menu.querySelector('[data-select-active]');

          if (activeOption && activeOption.hasAttribute('data-terra-select-clear-option')) {
            this.props.visuallyHiddenComponent.current.innerText = intl.formatMessage({
              id: 'Terra.form.select.selectCleared'
            });
          }
        } // Handles communicating the case where a regular option is selected to screen readers.

        /*
          Detecting if browser is not Safari before updating aria-live as there is some odd behaivor
          with VoiceOver on desktop, that causes the selected option to be read twice when this is
          is added to aria-live container.
          When we shift focus back to select, VoiceOver automatically reads the display text.
          Using aria-hidden on the display does not prevent VO from reading the display text and so it
          results in reading the display text followed by reading the aria-live message which is
          the display text + 'selected'
          */


        if (!_SharedUtil.default.isSafari()) {
          this.props.visuallyHiddenComponent.current.innerText = "".concat(option.props.display, " ").concat(selectedTxt);
        }

        onSelect(option.props.value, option);
      } else if (keyCode === KeyCode.KEY_HOME) {
        event.preventDefault();
        this.setState({
          active: _MenuUtil.default.findFirst(children)
        });
      } else if (keyCode === KeyCode.KEY_END) {
        event.preventDefault();
        this.setState({
          active: _MenuUtil.default.findLast(children)
        });
      }
    }
    /**
     * Communicates the selection or deselection of an option.
     * @param {event} event - The click event triggering the callback.
     * @param {ReactNode} option - The option that was clicked.
     */

  }, {
    key: "handleOptionClick",
    value: function handleOptionClick(event, option) {
      if (option.props.disabled || option !== this.downOption) {
        return;
      }

      var _this$props3 = this.props,
          input = _this$props3.input,
          onSelect = _this$props3.onSelect;
      onSelect(option.props.value, option);

      if (input) {
        input.focus();
      }
    }
    /**
     * Sets the hovered option as the active value.
     * @param {event} event - The mouse enter event.
     * @param {ReactNode} option - The option that received the mouse enter event.
     */

  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event, option) {
      // Prevents setting the active option on mouse enter if the keyboard scrolled the view.
      if (this.scrollTimeout) {
        return;
      }

      if (!option.props.disabled) {
        this.setState({
          active: option.props.value
        });
      }

      if (option.props.onMouseEnter) {
        option.props.onMouseEnter(event);
      }
    }
    /**
     * Scrolls the active option into view.
     * Options already in view will not scroll.
     * Options above the dropdown will be scrolled to the top of the menu.
     * Options below the dropdown will be scrolled to the bottom of the menu.
     */

  }, {
    key: "scrollIntoView",
    value: function scrollIntoView() {
      var activeOption = this.menu.querySelector('[data-select-active]');

      if (!this.state.active || activeOption === null) {
        return;
      }

      var dropdownRect = this.menu.parentNode.getBoundingClientRect();
      var optionRect = activeOption.getBoundingClientRect();

      if (optionRect.top < dropdownRect.top) {
        this.menu.parentNode.scrollTop = activeOption.offsetTop;
      } else if (optionRect.bottom > dropdownRect.bottom) {
        // To scroll to active option to top subtracting active option offsetTop with parent window's height.
        this.menu.parentNode.scrollTop = activeOption.offsetTop - dropdownRect.height + optionRect.height;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      return (
        /**
         * Note: role="listbox" and aria-activedescendant needed for VoiceOver on iOS to properly
         * shift the virtual indicator to this DOM element when dropdown is rendered. If you modify these
         * attributes, you'll need to manually verify that the virtual indicator on iOS is still shifted
         * to the dropdown / the selected item in the dropdown if an item is selected when the dropdown
         * is opened.
         */
        _react.default.createElement("ul", _extends({
          id: "terra-select-menu",
          role: "listbox",
          className: cx('menu'),
          "aria-label": this.props.intl.formatMessage({
            id: 'Terra.form.select.menu'
          }),
          ref: function ref(menu) {
            _this4.menu = menu;
          }
        }, this.state.active !== null ? {
          'aria-activedescendant': "terra-select-option-".concat(this.state.active)
        } : {}, {
          tabIndex: "0"
        }), this.clone(this.state.children))
      );
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var clearOptionDisplay = props.clearOptionDisplay,
          searchValue = props.searchValue,
          noResultContent = props.noResultContent;
      var children;
      var hasNoResults = false;
      var hasMaxSelection = false;
      var hasAddOption = false;
      children = _MenuUtil.default.filter(props.children, props.searchValue, props.optionFilter);
      children = _MenuUtil.default.updateSelectionState(children, props);

      if (children.length === 0) {
        children.push(_react.default.createElement(_NoResults.default, {
          noResultContent: noResultContent,
          value: searchValue
        }));
        hasNoResults = true;
      }

      if (_MenuUtil.default.shouldShowClearOption({
        clearOptionDisplay: clearOptionDisplay,
        searchValue: searchValue,
        hasAddOption: hasAddOption,
        hasNoResults: hasNoResults
      })) {
        children.unshift(_react.default.createElement(_ClearOption.default, {
          display: clearOptionDisplay,
          value: ""
        }));
      }

      return {
        children: children,
        searchValue: searchValue,
        hasMaxSelection: hasMaxSelection,
        hasNoResults: hasNoResults,
        active: _MenuUtil.default.getActiveOptionFromProps(props, children, state)
      };
    }
  }]);

  return Menu;
}(_react.default.Component);

Menu.propTypes = propTypes;
Menu.defaultProps = defaultProps;
/**
 * This polyfill enables backwards compatibility of features added in React 16.3.0.
 * More information is available at: https://github.com/reactjs/react-lifecycles-compat
 */

(0, _reactLifecyclesCompat.polyfill)(Menu);

var _default = (0, _reactIntl.injectIntl)(Menu);

exports.default = _default;