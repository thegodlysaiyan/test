"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIntl = require("react-intl");

var _Frame = _interopRequireDefault(require("./single/Frame"));

var _OptGroup = _interopRequireDefault(require("./shared/_OptGroup"));

var _Option = _interopRequireDefault(require("./shared/_Option"));

var _SelectUtil = _interopRequireDefault(require("./shared/_SelectUtil"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var propTypes = {
  /**
   * Whether a clear option is available to clear the selection, will use placeholder text if provided.
   */
  allowClear: _propTypes.default.bool,

  /**
   * The dropdown menu options.
   */
  children: _propTypes.default.node,

  /**
   * The default selected value. Can be a string, number, or array of strings/numbers.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),

  /**
   * Whether the select is disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )
   */
  // eslint-disable-next-line react/forbid-prop-types
  dropdownAttrs: _propTypes.default.object,

  /**
   * @private
   * The intl object containing translations. This is retrieved from the context automatically by injectIntl.
   */
  intl: _reactIntl.intlShape.isRequired,

  /**
   * Whether the select displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,

  /**
   * Whether the select displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,

  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,

  /**
   * Content to display when no results are found.
   */
  noResultContent: _propTypes.default.node,

  /**
   * Callback function triggered when the select loses focus. function(event)
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback function triggered when the value changes. function(value)
   */
  onChange: _propTypes.default.func,

  /**
   * Callback function triggered when the select is clicked. function(event)
   */
  onClick: _propTypes.default.func,

  /**
   * Callback function triggered when an option is deselected. function(value)
   */
  onDeselect: _propTypes.default.func,

  /**
   * Callback function triggered when the select receives focus. function(event)
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback function triggered when an option is selected. function(value)
   */
  onSelect: _propTypes.default.func,

  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,

  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,

  /**
   * The selected value. Can be a string, number, or array of strings/numbers.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array])
};
var defaultProps = {
  allowClear: false,
  children: undefined,
  defaultValue: undefined,
  disabled: false,
  dropdownAttrs: undefined,
  isIncomplete: false,
  isInvalid: false,
  noResultContent: undefined,
  onChange: undefined,
  onDeselect: undefined,
  onSelect: undefined,
  placeholder: undefined,
  required: false,
  value: undefined
};

var SingleSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(SingleSelect, _React$Component);

  function SingleSelect(props) {
    var _this;

    _classCallCheck(this, SingleSelect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SingleSelect).call(this, props));
    var defaultValue = props.defaultValue,
        value = props.value;
    _this.state = {
      value: _SelectUtil.default.defaultValue({
        defaultValue: defaultValue,
        value: value
      })
    };
    _this.display = _this.display.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleDeselect = _this.handleDeselect.bind(_assertThisInitialized(_this));
    _this.handleSelect = _this.handleSelect.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * Returns the appropriate variant display
   */


  _createClass(SingleSelect, [{
    key: "display",
    value: function display() {
      var selectValue = _SelectUtil.default.value(this.props, this.state);

      return _SelectUtil.default.valueDisplay(this.props, selectValue);
    }
    /**
     * Communicates changes to the value.
     * @param {array|number|string} value - The value resulting from a change.
     */

  }, {
    key: "handleChange",
    value: function handleChange(value) {
      if (this.props.value === undefined) {
        this.setState({
          value: value
        });
      }

      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }
    /**
     * Communicates the removal of a value from the selected options.
     * @param {number|string} value - The value to be removed.
     */

  }, {
    key: "handleDeselect",
    value: function handleDeselect(value) {
      this.handleChange(_SelectUtil.default.deselect(this.props, this.state, value));

      if (this.props.onDeselect) {
        this.props.onDeselect(value);
      }
    }
    /**
     * Communicates the selection of a value.
     * @param {number|string} value - The value of the selected option.
     * @param {ReactNode} option - The selected option.
     */

  }, {
    key: "handleSelect",
    value: function handleSelect(value, option) {
      this.handleChange(_SelectUtil.default.select(this.props, this.state, value));

      if (this.props.onSelect) {
        this.props.onSelect(value, option);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          allowClear = _this$props.allowClear,
          children = _this$props.children,
          defaultValue = _this$props.defaultValue,
          onChange = _this$props.onChange,
          placeholder = _this$props.placeholder,
          required = _this$props.required,
          value = _this$props.value,
          intl = _this$props.intl,
          otherProps = _objectWithoutProperties(_this$props, ["allowClear", "children", "defaultValue", "onChange", "placeholder", "required", "value", "intl"]);

      var defaultPlaceholder = intl.formatMessage({
        id: 'Terra.form.select.defaultDisplay'
      });
      var selectPlaceholder = placeholder === undefined ? defaultPlaceholder : placeholder;
      var clearOptionDisplay;

      if (allowClear) {
        if (selectPlaceholder.length === 0) {
          clearOptionDisplay = defaultPlaceholder;
        } else {
          clearOptionDisplay = selectPlaceholder;
        }
      }

      return _react.default.createElement(_Frame.default, _extends({}, otherProps, {
        "data-terra-select": true,
        value: _SelectUtil.default.value(this.props, this.state),
        display: this.display(),
        onDeselect: this.handleDeselect,
        onSelect: this.handleSelect,
        placeholder: selectPlaceholder,
        required: required,
        totalOptions: _SelectUtil.default.getTotalNumberOfOptions(children),
        clearOptionDisplay: clearOptionDisplay
      }), children);
    }
  }]);

  return SingleSelect;
}(_react.default.Component);

SingleSelect.Option = _Option.default;
SingleSelect.OptGroup = _OptGroup.default;
SingleSelect.propTypes = propTypes;
SingleSelect.defaultProps = defaultProps;
SingleSelect.isSelect = true;

var _default = (0, _reactIntl.injectIntl)(SingleSelect);

exports.default = _default;