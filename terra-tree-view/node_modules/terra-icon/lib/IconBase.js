"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _IconModule = _interopRequireDefault(require("./Icon.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_IconModule.default);

var propTypes = {
  /**
   * Should the svg mirror when dir="rtl".
   */
  isBidi: _propTypes.default.bool,

  /**
   * Should the SVG rotate.
   */
  isSpin: _propTypes.default.bool,

  /**
   * Child nodes.
   */
  children: _propTypes.default.node,

  /**
   * Height of SVG.
   */
  height: _propTypes.default.string,

  /**
   * Width of SVG.
   */
  width: _propTypes.default.string,

  /**
   * String that labels the current element. If 'aria-label' is present,
   * role is set to 'img' and aria-hidden is removed.
   */
  ariaLabel: _propTypes.default.string,

  /**
   * Focusable attribute. IE 10/11 are focusable without this attribute.
   */
  focusable: _propTypes.default.string
};
var defaultProps = {
  isBidi: false,
  isSpin: false,
  children: null,
  height: '1em',
  width: '1em',
  ariaLabel: null,
  focusable: 'false'
};

var IconBase = function IconBase(_ref) {
  var isBidi = _ref.isBidi,
      isSpin = _ref.isSpin,
      children = _ref.children,
      height = _ref.height,
      width = _ref.width,
      ariaLabel = _ref.ariaLabel,
      focusable = _ref.focusable,
      customProps = _objectWithoutProperties(_ref, ["isBidi", "isSpin", "children", "height", "width", "ariaLabel", "focusable"]);

  var attributes = _objectSpread({}, customProps);

  var addAnimationStyles = function addAnimationStyles() {
    if (isSpin) {
      var css = '@-webkit-keyframes tui-spin-ltr{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes tui-spin-ltr{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@-webkit-keyframes tui-spin-rtl{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(-359deg);transform:rotate(-359deg)}}@keyframes tui-spin-rtl{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(-359deg);transform:rotate(-359deg)}}[dir=ltr] .tui-Icon.is-spin {-webkit-animation: tui-spin-ltr 2s infinite linear;animation: tui-spin-ltr 2s infinite linear;}[dir=rtl] .tui-Icon.is-spin {-webkit-animation: tui-spin-rtl 2s infinite linear;animation: tui-spin-rtl 2s infinite linear;}';
      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';
      style.id = 'terra-icon-animation'; // If we haven't written the styles to the DOM yet, add them, otherwise don't do this for subsequent spinner icons.

      if (!document.getElementById(style.id)) {
        style.appendChild(document.createTextNode(css));
        head.appendChild(style);
      }
    }
  };

  addAnimationStyles(); // append to existing classNames

  var classes = cx('tui-Icon', 'icon', {
    'is-bidi': isBidi
  }, {
    'is-spin': isSpin
  }, attributes.className); // aria-label is present, remove aria-hidden, set role to img

  if (ariaLabel) {
    attributes['aria-label'] = ariaLabel;
    attributes.role = 'img';
    attributes['aria-hidden'] = null;
  } else {
    attributes['aria-hidden'] = 'true';
  }

  attributes.height = height;
  attributes.width = width;
  attributes.focusable = focusable;
  return _react.default.createElement("svg", _extends({}, attributes, {
    className: classes
  }), children);
};

IconBase.propTypes = propTypes;
IconBase.defaultProps = defaultProps;
var _default = IconBase;
exports.default = _default;