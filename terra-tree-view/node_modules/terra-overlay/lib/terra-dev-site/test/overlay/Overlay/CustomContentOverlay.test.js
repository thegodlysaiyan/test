"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _Overlay = _interopRequireDefault(require("../../../../Overlay"));

var _OverlayContainer = _interopRequireDefault(require("../../../../OverlayContainer"));

var _OverlayTestCommonModule = _interopRequireDefault(require("./OverlayTestCommon.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var cx = _bind.default.bind(_OverlayTestCommonModule.default);

var OverlayExample = /*#__PURE__*/function (_React$Component) {
  _inherits(OverlayExample, _React$Component);

  function OverlayExample() {
    var _this;

    _classCallCheck(this, OverlayExample);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OverlayExample).call(this));
    _this.state = {
      show: false,
      toggle: 'true'
    };
    _this.handleTriggerOverlay = _this.handleTriggerOverlay.bind(_assertThisInitialized(_this));
    _this.handleTriggerFullScreenOverlay = _this.handleTriggerFullScreenOverlay.bind(_assertThisInitialized(_this));
    _this.handleRandomClick = _this.handleRandomClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(OverlayExample, [{
    key: "handleTriggerOverlay",
    value: function handleTriggerOverlay() {
      var _this2 = this;

      this.setState({
        show: true,
        relative: true,
        id: 'terra-Overlay--container'
      });
      setTimeout(function () {
        _this2.setState({
          show: false
        });
      }, 5000);
    }
  }, {
    key: "handleTriggerFullScreenOverlay",
    value: function handleTriggerFullScreenOverlay() {
      var _this3 = this;

      this.setState({
        show: true,
        relative: false,
        id: 'terra-Overlay--fullscreen'
      });
      setTimeout(function () {
        _this3.setState({
          show: false
        });
      }, 5000);
    }
  }, {
    key: "handleRandomClick",
    value: function handleRandomClick() {
      if (this.state.toggle === 'false') {
        this.setState({
          toggle: 'true'
        });
      } else {
        this.setState({
          toggle: 'false'
        });
      }
    }
  }, {
    key: "addOverlay",
    value: function addOverlay() {
      return _react.default.createElement(_Overlay.default, {
        isOpen: this.state.show,
        isRelativeToContainer: this.state.relative,
        id: this.state.id
      }, _react.default.createElement("h3", null, "Overlay will timeout in 5 seconds."));
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        id: "custom-content-example"
      }, _react.default.createElement(_OverlayContainer.default, {
        className: cx('overlay-container2'),
        overlay: this.addOverlay()
      }, _react.default.createElement("button", {
        type: "button",
        id: "trigger_fullscreen",
        onClick: this.handleTriggerFullScreenOverlay
      }, "Trigger Fullscreen Overlay"), _react.default.createElement("button", {
        type: "button",
        id: "trigger_container",
        onClick: this.handleTriggerOverlay
      }, "Trigger Container Overlay")), _react.default.createElement("br", null), _react.default.createElement("p", null, " Outside of overlay container to prove functionality. Click the random button below after clicking the Trigger Container Overlay button to confirm an Overlay relative to container does not block outside interactions. "), _react.default.createElement("button", {
        type: "button",
        id: "random_button",
        onClick: this.handleRandomClick
      }, "A Random Button To Change Toggle State "), _react.default.createElement("p", null, "Random Button toggle State is", ' ', _react.default.createElement("span", {
        id: "random_state"
      }, this.state.toggle)));
    }
  }]);

  return OverlayExample;
}(_react.default.Component);

var _default = OverlayExample;
exports.default = _default;