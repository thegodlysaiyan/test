"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _terraPropsTable = _interopRequireDefault(require("terra-props-table"));

var _terraMarkdown = _interopRequireDefault(require("terra-markdown"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _NpmBadge = _interopRequireDefault(require("./NpmBadge"));

var _ExampleTemplate = _interopRequireDefault(require("./ExampleTemplate"));

var _DocTemplateModule = _interopRequireDefault(require("./DocTemplate.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_DocTemplateModule.default);

var propTypes = {
  /**
   * Enables the ability to add custom content to doc template. Children will be rendered after all other content.
   */
  children: _propTypes.default.node,

  /**
   * The given component's npm package name.
   */
  packageName: _propTypes.default.string,

  /**
   * The url for the provided package if not in npm. This will be ignored if packageVersion is not set.
   */
  packageUrl: _propTypes.default.string,

  /**
   * The given component's package version.
   */
  packageVersion: _propTypes.default.string,

  /**
   * The given component's readme file imported to a string.
   */
  readme: _propTypes.default.string,

  /**
   * The url to the source code for the given component.
   */
  srcPath: _propTypes.default.string,

  /**
   * All of the example(s) that will be displayed. An empty array is supported.
   * ```
   * title: The title of the example
   * description: A description of the example to be displayed below the title
   * example: The example to be displayed
   * source: The source code of the example
   * ```
   */
  examples: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string,
    description: _propTypes.default.node,
    example: _propTypes.default.element,
    source: _propTypes.default.string
  })),

  /**
   * All of the props table(s) that will be displayed. An empty array is supported.
   * ```
   * componentSrc: The source code of the component
   * componentName: The name of the component
   * propsResolution: Type of react-docgen resolver to use for prop-types resolution. Supported values are `default` or `findAllComponentDefinitions`. Will use `default` if left unspecified.
   * ```
   */
  propsTables: _propTypes.default.arrayOf(_propTypes.default.shape({
    componentSrc: _propTypes.default.string,
    componentName: _propTypes.default.string,
    componentProps: _propTypes.default.string,
    propsResolution: _propTypes.default.string
  }))
};
var defaultProps = {
  packageName: '',
  packageUrl: '',
  packageVersion: '',
  readme: '',
  srcPath: '',
  examples: [],
  propsTables: []
};

var DocTemplate = function DocTemplate(_ref) {
  var packageName = _ref.packageName,
      packageVersion = _ref.packageVersion,
      packageUrl = _ref.packageUrl,
      readme = _ref.readme,
      srcPath = _ref.srcPath,
      examples = _ref.examples,
      propsTables = _ref.propsTables,
      children = _ref.children,
      customProps = _objectWithoutProperties(_ref, ["packageName", "packageVersion", "packageUrl", "readme", "srcPath", "examples", "propsTables", "children"]);

  var localExamples = examples;
  var localPropsTables;
  if (propsTables) localPropsTables = propsTables; // Assign unique identifiers to use as keys later

  var id = 0;

  for (var i = 0; i < localExamples.length; i += 1) {
    localExamples[i].id = id;
    id += 1;
  }

  if (localPropsTables) {
    for (var _i = 0; _i < localPropsTables.length; _i += 1) {
      localPropsTables[_i].id = id;
      id += 1;
    }
  }

  var docTemplateClassNames = cx(['doc-template', customProps.className]);
  var exampleHeader;

  if (localExamples.length > 0) {
    var exampleHeaderText = localExamples.length > 1 ? 'Examples' : 'Example';
    exampleHeader = _react.default.createElement("h1", {
      className: cx('examples-header')
    }, exampleHeaderText);
  }

  var badge = _react.default.createElement(_NpmBadge.default, {
    packageName: packageName,
    packageUrl: packageUrl,
    packageVersion: packageVersion
  });

  return _react.default.createElement("div", _extends({}, customProps, {
    className: docTemplateClassNames
  }), _react.default.createElement("div", {
    className: cx('doc-card')
  }, packageName && badge, readme && _react.default.createElement(_terraMarkdown.default, {
    src: readme
  }), srcPath && _react.default.createElement("a", {
    href: srcPath
  }, "View component source code")), exampleHeader, localExamples.map(function (example) {
    return _react.default.createElement(_ExampleTemplate.default, {
      title: example.title,
      example: example.example,
      exampleSrc: example.source,
      description: example.description,
      key: example.id
    });
  }), _react.default.createElement("div", {
    className: cx('doc-card')
  }, propsTables[0] && propsTables[0].componentProps ? localPropsTables.map(function (propsTable) {
    return _react.default.createElement("div", {
      className: cx('props-table-markdown'),
      key: propsTable.id
    }, _react.default.createElement("h2", null, propsTable.componentName, ' Props'), _react.default.createElement(_terraMarkdown.default, {
      src: propsTable.componentProps
    }));
  }) : localPropsTables.map(function (propsTable) {
    return _react.default.createElement(_terraPropsTable.default, {
      src: propsTable.componentSrc,
      componentName: propsTable.componentName,
      key: propsTable.id,
      propsResolution: propsTable.propsResolution
    });
  })), children && _react.default.createElement("div", {
    className: cx('doc-card')
  }, children));
};

DocTemplate.propTypes = propTypes;
DocTemplate.defaultProps = defaultProps;
var _default = DocTemplate;
exports.default = _default;