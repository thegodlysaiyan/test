"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _terraStatusView = _interopRequireDefault(require("terra-status-view"));

var propTypes = {
  /**
   * Components to render within the context of the ApplicationErrorBoundary. Exceptions thrown
   * by these components during their render lifecycle will be caught by the ApplicationErrorBoundary.
   */
  children: _propTypes.default.node
};
/**
 * The ApplicationErrorBoundary is designed to catch exceptions that are thrown
 * by its children during render lifecycle. In the event an exception is thrown,
 * a styled status component will be rendered to communicate the exception to the
 * user.
 *
 * Unlike a standard error boundary, the error is not persisted within the
 * ApplicationErrorBoundary's state. The ApplicationErrorBoundary will attempt to
 * render its children each time it is updated. Resetting the ApplicationErrorBoundary
 * by using a key is not necessary.
 */

var ApplicationErrorBoundary =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ApplicationErrorBoundary, _React$Component);

  function ApplicationErrorBoundary(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ApplicationErrorBoundary);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ApplicationErrorBoundary).call(this, props));

    _this.resetError = function () {
      _this.errorRef.current = undefined;

      if (_this.state.error) {
        _this.setState({
          error: undefined
        });
      }
    };

    _this.errorRef = _react.default.createRef();
    _this.state = {
      error: undefined
    };
    return _this;
  }

  (0, _createClass2.default)(ApplicationErrorBoundary, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      /**
       * After mounting (and each subsequent update), the error state within the ApplicationErrorBoundary
       * is reset.
       *
       * If the ApplicationErrorBoundary was updated due to a caught exception, the componentDidCatch method will
       * execute and the error will be stored in the errorRef. Otherwise, resetting the error state will trigger another update that
       * will  result in the children being rendered (if they were not already successfully rendered).
       */
      this.resetError();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.resetError();
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error) {
      /**
       * If the ApplicationErrorBoundary was updated due to a caught exception, this lifecycle method will be
       * executed. componentDidCatch executes after componentDidMount/componentDidUpdate, so this is executing
       * after the error state has been reset.
       *
       * The error that was caught is stored in a ref and the error within state is cleared. This causes
       * the ApplicationErrorBoundary to update again to ensure that the StatusView remains presented until the
       * next update occurs.
       */
      this.errorRef.current = error;
      this.setState({
        error: undefined
      });
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var activeError = this.state.error || this.errorRef.current;

      if (activeError) {
        return _react.default.createElement(_terraStatusView.default, {
          variant: "error",
          message: activeError.toString()
        });
      }

      return children;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      /**
       * When an exception occurs while rendering children, getDerivedStateFromError gets executed. The error
       * is returned here and stored within the ApplicationErrorBoundary's state, triggering an update.
       */
      return {
        error: error
      };
    }
  }]);
  return ApplicationErrorBoundary;
}(_react.default.Component);

ApplicationErrorBoundary.propTypes = propTypes;
var _default = ApplicationErrorBoundary;
exports.default = _default;