"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _terraApplicationNavigation = _interopRequireDefault(require("terra-application-navigation"));

var _propTypes2 = require("terra-application-navigation/lib/utils/propTypes");

var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));

var _applicationLoadingOverlay = _interopRequireWildcard(require("../application-loading-overlay"));

var _navigationPrompt = require("../navigation-prompt");

var _applicationIntl = require("../application-intl");

var propTypes = {
  /**
   * A string key representing the currently active navigation item. This value should match one of the item keys provided in the
   * `navigationItems` array.
   */
  activeNavigationItemKey: _propTypes.default.string,

  /**
   * A collection of child elements to render within the ApplicationNavigation body.
   */
  children: _propTypes.default.node,

  /**
   * By default, the ApplicationNavigation component will resolve any registered NavigationPrompts prior to
   * communicating logout selection with `onSelectLogout`. If `disablePromptsForLogout` is provided,
   * no NavigationPrompts are resolved when logout is selected.
   */
  disablePromptsForLogout: _propTypes.default.bool,

  /**
   * By default, the ApplicationNavigation component will resolve any rendered NavigationPrompts prior to
   * communicating navigation item selections with `onSelectNavigationItem`. If `disablePromptsForNavigationItems`
   * is provided, no NavigationPrompts are resolved when navigation items are selected.
   */
  disablePromptsForNavigationItems: _propTypes.default.bool,

  /**
   * A configuration object with information specifying the creation of the Extension buttons rendered within the
   * ApplicationNavigation header.
   */
  extensionItems: _propTypes2.extensionItemsPropType,

  /**
   * An element to render within the ApplicationNavigation utility menu, shifted to the drawer at the `medium` breakpoint and below.
   */
  hero: _propTypes.default.element,

  /**
   * An array of configuration objects with information specifying the creation of navigation items. These items
   * are rendered within the ApplicationNavigation header at larger breakpoints and within the drawer menu at smaller breakpoints.
   */
  navigationItems: _propTypes2.navigationItemsPropType,

  /**
   * The Object (or function that returns an Object) that specifies the messages
   * used to prompt the user when navigation items are selected while NavigationPrompts
   * are rendered by the ApplicationNavigation content.
   */
  navigationPromptResolutionOptions: _navigationPrompt.navigationPromptResolutionOptionsShape,

  /**
   * Key/Value pairs associating a string key entry to a Number notification count. The keys must correspond to a
   * navigationItem or extensionItem key provided through their associated props.
   */
  notifications: _propTypes.default.object,
  // eslint-disable-line react/no-unused-prop-types

  /**
   * Callback function triggered on Drawer Menu state change.
   */
  onDrawerMenuStateChange: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of an extensions item.
   *
   * Ex: `onSelectExtensionsItem(String selectedUtilityItemKey, Object metaData)`
   */
  onSelectExtensionItem: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of the Help utility item.
   * If `onSelectHelp` is not provided, the Help utility item will not be rendered.
   *
   * Ex: `onSelectHelp()`
   */
  onSelectHelp: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of the Logout action button.
   * If `onSelectLogout` is not provided, the Logout action button will not be rendered.
   *
   * Ex: `onSelectLogout()`
   */
  onSelectLogout: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of a navigation item.
   *
   * Ex: `onSelectNavigationItem(String selectedNavigationItemKey, Object metaData)`
   */
  onSelectNavigationItem: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of the Settings utility item.
   * If `onSelectSettings` is not provided, the Settings utility item will not be rendered.
   *
   * Ex: `onSelectSettings()`
   */
  onSelectSettings: _propTypes.default.func,

  /**
   * A function to be executed upon the selection of a custom utility item.
   *
   * Ex: `onSelectUtilityItem(String selectedUtilityItemKey, Object metaData)`
   */
  onSelectUtilityItem: _propTypes.default.func,

  /**
   * A configuration object that defines the strings rendered within the ApplicationNavigation header.
   */
  titleConfig: _propTypes2.titleConfigPropType,

  /**
   * A configuration object with information pertaining to the application's user.
   */
  userConfig: _propTypes2.userConfigPropType,

  /**
   * An array of configuration objects with information specifying the creation of additional utility menu items.
   * These items are rendered within the popup utility menu at larger breakpoints and within the drawer menu at smaller breakpoints.
   */
  utilityItems: _propTypes2.utilityItemsPropType
};

var ApplicationNavigation = function ApplicationNavigation(_ref) {
  var activeNavigationItemKey = _ref.activeNavigationItemKey,
      children = _ref.children,
      disablePromptsForLogout = _ref.disablePromptsForLogout,
      disablePromptsForNavigationItems = _ref.disablePromptsForNavigationItems,
      extensionItems = _ref.extensionItems,
      hero = _ref.hero,
      navigationItems = _ref.navigationItems,
      navigationPromptResolutionOptions = _ref.navigationPromptResolutionOptions,
      notifications = _ref.notifications,
      onDrawerMenuStateChange = _ref.onDrawerMenuStateChange,
      onSelectExtensionItem = _ref.onSelectExtensionItem,
      onSelectHelp = _ref.onSelectHelp,
      propOnSelectLogout = _ref.onSelectLogout,
      propOnSelectNavigationItem = _ref.onSelectNavigationItem,
      onSelectSettings = _ref.onSelectSettings,
      onSelectUtilityItem = _ref.onSelectUtilityItem,
      titleConfig = _ref.titleConfig,
      userConfig = _ref.userConfig,
      utilityItems = _ref.utilityItems;

  var applicationIntl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);

  var navigationPromptCheckpointRef = (0, _react.useRef)();
  var onSelectNavigationItem = (0, _react.useCallback)(function (selectedItemKey) {
    if (disablePromptsForNavigationItems) {
      propOnSelectNavigationItem(selectedItemKey);
      return;
    }

    navigationPromptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || (0, _navigationPrompt.getUnsavedChangesPromptOptions)(applicationIntl)).then(function () {
      propOnSelectNavigationItem(selectedItemKey);
    }).catch(function (e) {
      if (e) throw e;
    });
  }, [applicationIntl, disablePromptsForNavigationItems, navigationPromptResolutionOptions, propOnSelectNavigationItem]);
  var onSelectLogout = (0, _react.useCallback)(function () {
    if (disablePromptsForLogout) {
      propOnSelectLogout();
      return;
    }

    navigationPromptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || (0, _navigationPrompt.getUnsavedChangesPromptOptions)(applicationIntl)).then(function () {
      propOnSelectLogout();
    }).catch(function (e) {
      if (e) throw e;
    });
  }, [applicationIntl, disablePromptsForLogout, navigationPromptResolutionOptions, propOnSelectLogout]);
  return _react.default.createElement(_terraApplicationNavigation.default, {
    hero: hero,
    notifications: notifications,
    titleConfig: titleConfig,
    navigationItems: navigationItems,
    onSelectNavigationItem: propOnSelectNavigationItem && onSelectNavigationItem,
    activeNavigationItemKey: activeNavigationItemKey,
    userConfig: userConfig,
    extensionItems: extensionItems,
    onSelectExtensionItem: onSelectExtensionItem,
    utilityItems: utilityItems,
    onSelectUtilityItem: onSelectUtilityItem,
    onSelectSettings: onSelectSettings,
    onSelectHelp: onSelectHelp,
    onSelectLogout: propOnSelectLogout && onSelectLogout,
    onDrawerMenuStateChange: onDrawerMenuStateChange
  }, _react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, _react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    ref: navigationPromptCheckpointRef
  }, _react.default.createElement(_applicationErrorBoundary.default, null, _react.default.createElement(_react.Suspense, {
    fallback: _react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true
    })
  }, children)))));
};

ApplicationNavigation.propTypes = propTypes;
var _default = ApplicationNavigation;
exports.default = _default;