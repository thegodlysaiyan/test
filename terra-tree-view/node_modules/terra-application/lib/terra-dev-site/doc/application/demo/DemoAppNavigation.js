"use strict";

var _interopRequireWildcard3 = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _react = _interopRequireWildcard3(require("react"));

var _IconLightbulb = _interopRequireDefault(require("terra-icon/lib/icon/IconLightbulb"));

var _applicationNavigation = _interopRequireDefault(require("terra-application/lib/application-navigation"));

var _disclosureManager = require("terra-application/lib/disclosure-manager");

var _ModalPresenter = require("./ModalPresenter");

var Page1Content = _react.default.lazy(function () {
  return Promise.resolve().then(function () {
    return (0, _interopRequireWildcard2.default)(require('./Page1Content'));
  });
});

var Page2Content = _react.default.lazy(function () {
  return Promise.resolve().then(function () {
    return (0, _interopRequireWildcard2.default)(require('./Page2Content'));
  });
});

var Page3Content = _react.default.lazy(function () {
  return Promise.resolve().then(function () {
    return (0, _interopRequireWildcard2.default)(require('./Page3Content'));
  });
});

var userConfig = {
  name: 'Demo User',
  initials: 'DU'
};

var DemoAppNavigation = function DemoAppNavigation() {
  var disclosureManager = (0, _react.useContext)(_disclosureManager.DisclosureManagerContext);

  var _useState = (0, _react.useState)('page_1'),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      activeNavItem = _useState2[0],
      setActiveNavItem = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      loggedOut = _useState4[0],
      setLoggedOut = _useState4[1];

  var disclosureDismissRef = (0, _react.useRef)();
  var navigationItemsRef = (0, _react.useRef)([{
    key: 'page_1',
    text: 'Page 1'
  }, {
    key: 'page_2',
    text: 'Page 2'
  }, {
    key: 'page_3',
    text: 'Page 3'
  }]);

  if (loggedOut) {
    return _react.default.createElement("div", null, _react.default.createElement("p", null, "Logged Out"), _react.default.createElement("button", {
      type: "button",
      onClick: function onClick() {
        setLoggedOut(false);
      }
    }, "Reset"));
  }

  var pageContent;

  switch (activeNavItem) {
    case 'page_1':
      pageContent = _react.default.createElement(Page1Content, null);
      break;

    case 'page_2':
      pageContent = _react.default.createElement(Page2Content, null);
      break;

    case 'page_3':
      pageContent = _react.default.createElement(Page3Content, null);
      break;

    default:
      pageContent = null;
      break;
  }

  return _react.default.createElement(_applicationNavigation.default, {
    titleConfig: {
      title: 'Terra Application Demo'
    },
    userConfig: userConfig,
    navigationItems: navigationItemsRef.current,
    activeNavigationItemKey: activeNavItem,
    onSelectNavigationItem: function onSelectNavigationItem(key) {
      setActiveNavItem(key);
    },
    extensionItems: [{
      key: 'extension_1',
      icon: _react.default.createElement(_IconLightbulb.default, null),
      text: 'Extension 1'
    }],
    onSelectExtensionItem: function onSelectExtensionItem(key) {
      if (key === 'extension_1') {
        disclosureManager.disclose({
          preferredType: 'modal',
          size: 'large',
          content: {
            key: 'extension_1_modal',
            component: _react.default.createElement(_ModalPresenter.ModalContent, {
              name: "Extension Modal",
              onSubmit: function onSubmit() {
                if (disclosureDismissRef.current) {
                  disclosureDismissRef.current();
                  disclosureDismissRef.current = undefined;
                }
              }
            })
          }
        }).then(function (_ref) {
          var dismissDisclosure = _ref.dismissDisclosure;
          disclosureDismissRef.current = dismissDisclosure;
        });
      }
    },
    utilityItems: [{
      key: 'utility_1',
      text: 'Utility Item 1'
    }],
    onSelectUtilityItem: function onSelectUtilityItem(utilityItemKey) {
      if (utilityItemKey === 'utility_1') {
        disclosureManager.disclose({
          preferredType: 'modal',
          size: 'large',
          content: {
            key: 'utility_1_modal',
            component: _react.default.createElement(_ModalPresenter.ModalContent, {
              name: "Utility Modal",
              onSubmit: function onSubmit() {
                if (disclosureDismissRef.current) {
                  disclosureDismissRef.current();
                  disclosureDismissRef.current = undefined;
                }
              }
            })
          }
        }).then(function (_ref2) {
          var dismissDisclosure = _ref2.dismissDisclosure;
          disclosureDismissRef.current = dismissDisclosure;
        });
      }
    },
    onSelectLogout: function onSelectLogout() {
      setLoggedOut(true);
    }
  }, pageContent);
};

var _default = DemoAppNavigation;
exports.default = _default;