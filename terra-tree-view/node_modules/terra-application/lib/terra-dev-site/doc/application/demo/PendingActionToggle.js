"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _navigationPrompt = _interopRequireDefault(require("terra-application/lib/navigation-prompt"));

var _PendingActionToggleModule = _interopRequireDefault(require("./PendingActionToggle.module.scss"));

var cx = _bind.default.bind(_PendingActionToggleModule.default);

var PendingActionToggle = function PendingActionToggle() {
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasPendingAction1 = _useState2[0],
      setHasPendingAction1 = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hasPendingAction2 = _useState4[0],
      setHasPendingAction2 = _useState4[1];

  return _react.default.createElement("div", null, _react.default.createElement("h3", null, "Unsaved Changes"), _react.default.createElement("p", null, "This component uses a NavigationPrompt to register unsaved state with framework. Multiple NavigationPrompts can be rendered at the same time."), _react.default.createElement("p", {
    className: hasPendingAction1 ? cx('red-text') : null
  }, "Pending Action 1:", ' ', _react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      setHasPendingAction1(!hasPendingAction1);
    }
  }, hasPendingAction1 ? 'Disable' : 'Activate')), _react.default.createElement("p", {
    className: hasPendingAction2 ? cx('red-text') : null
  }, "Pending Action 2:", ' ', _react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      setHasPendingAction2(!hasPendingAction2);
    }
  }, hasPendingAction2 ? 'Disable' : 'Activate')), hasPendingAction1 ? _react.default.createElement(_navigationPrompt.default, {
    description: "Pending Action 1"
  }) : undefined, hasPendingAction2 ? _react.default.createElement(_navigationPrompt.default, {
    description: "Pending Action 2"
  }) : undefined);
};

var _default = PendingActionToggle;
exports.default = _default;