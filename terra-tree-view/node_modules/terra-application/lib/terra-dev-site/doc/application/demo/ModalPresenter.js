"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalContent = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _terraScroll = _interopRequireDefault(require("terra-scroll"));

var _breakpoints = require("terra-application/lib/breakpoints");

var _applicationLoadingOverlay = _interopRequireDefault(require("terra-application/lib/application-loading-overlay"));

var _applicationIntl = require("terra-application/lib/application-intl");

var _disclosureManager = require("terra-application/lib/disclosure-manager");

var _PendingActionToggle = _interopRequireDefault(require("./PendingActionToggle"));

var _ModalPresenterModule = _interopRequireDefault(require("./ModalPresenter.module.scss"));

var cx = _bind.default.bind(_ModalPresenterModule.default);

var ModalContent = function ModalContent(_ref) {
  var name = _ref.name,
      onSubmit = _ref.onSubmit;
  var activeBreakpoint = (0, _react.useContext)(_breakpoints.ActiveBreakpointContext);
  var applicationIntl = (0, _react.useContext)(_applicationIntl.ApplicationIntlContext);
  var disclosureManager = (0, _react.useContext)(_disclosureManager.DisclosureManagerContext);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasError = _useState2[0],
      setHasError = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isInitialized = _useState4[0],
      setIsInitialized = _useState4[1];

  (0, _react.useEffect)(function () {
    if (isInitialized) {
      return undefined;
    }

    var timeout = setTimeout(function () {
      setIsInitialized(true);
    }, 2000);
    return function () {
      clearTimeout(timeout);
    };
  }, [isInitialized]);

  if (!isInitialized) {
    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_disclosureManager.DisclosureManagerHeaderAdapter, {
      title: name
    }), _react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true,
      backgroundStyle: "clear"
    }));
  }

  if (hasError) {
    throw new Error('Modal Page failed to render');
  }

  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_disclosureManager.DisclosureManagerHeaderAdapter, {
    title: name
  }), _react.default.createElement(_terraScroll.default, null, _react.default.createElement("div", {
    className: cx('modal-content')
  }, _react.default.createElement("h2", null, name), _react.default.createElement("h3", null, "Modal Dismissal"), _react.default.createElement("p", null, "This modal will close when the Esc key is pressed, the Close button is pressed, or if the disclosee dismisses it when the Done button is pressed."), _react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      /**
       * The registered dismiss check is overridden prior to calling onSubmit to allow the modal to be closed cleanly
       * without prompting the user.
       */
      disclosureManager.registerDismissCheck();
      onSubmit();
    }
  }, "Done"), _react.default.createElement("h3", null, "Configuration Properties"), _react.default.createElement("p", null, "Active Breakpoint:", ' ', _react.default.createElement("span", null, activeBreakpoint)), _react.default.createElement("p", null, "Intl Locale:", ' ', _react.default.createElement("span", null, applicationIntl.locale)), _react.default.createElement("h3", null, "Error Handling"), _react.default.createElement("p", null, "Press the button below to throw an exception that will be caught and handled by the framework."), _react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      setHasError(true);
    }
  }, "Throw Error"), _react.default.createElement(_PendingActionToggle.default, null))));
};

exports.ModalContent = ModalContent;
ModalContent.propTypes = {
  name: _propTypes.default.string,
  onSubmit: _propTypes.default.func
};

var ModalPresenter = function ModalPresenter() {
  var disclosureManager = (0, _react.useContext)(_disclosureManager.DisclosureManagerContext);
  var disclosureRef = (0, _react.useRef)();
  return _react.default.createElement("div", null, _react.default.createElement("h3", null, "Modal Presenter"), _react.default.createElement("p", null, "This component uses the DisclosureManagerContext to present a modal."), _react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      disclosureManager.disclose({
        preferredType: 'modal',
        size: 'large',
        content: {
          key: 'modal_component_demo',
          component: _react.default.createElement(ModalContent, {
            name: "Modal Component Demo",
            onSubmit: function onSubmit() {
              if (disclosureRef.current) {
                disclosureRef.current();
                disclosureRef.current = undefined;
              }
            }
          })
        }
      }).then(function (_ref2) {
        var dismissDisclosure = _ref2.dismissDisclosure;
        disclosureRef.current = dismissDisclosure;
      });
    }
  }, "Show Modal"));
};

var _default = ModalPresenter;
exports.default = _default;