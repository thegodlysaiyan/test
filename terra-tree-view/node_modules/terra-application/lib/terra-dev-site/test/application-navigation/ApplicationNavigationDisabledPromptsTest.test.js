"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _applicationBase = _interopRequireDefault(require("../../../application-base"));

var _applicationNavigation = _interopRequireDefault(require("../../../application-navigation"));

var _navigationPrompt = _interopRequireDefault(require("../../../navigation-prompt"));

var PageContent = function PageContent(_ref) {
  var title = _ref.title;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasPendingAction = _useState2[0],
      setHasPendingAction = _useState2[1];

  return _react.default.createElement("div", null, _react.default.createElement("p", null, title), _react.default.createElement("p", null, "Toggle pending action:", ' ', _react.default.createElement("button", {
    id: "pending-action-toggle",
    type: "button",
    onClick: function onClick() {
      setHasPendingAction(!hasPendingAction);
    }
  }, hasPendingAction ? 'Disable' : 'Enable')), hasPendingAction ? _react.default.createElement(_navigationPrompt.default, {
    description: "Testing ApplicationNavigation's navigation prompt handling"
  }) : undefined);
};

PageContent.propTypes = {
  title: _propTypes.default.string
};

var ApplicationNavigationDisabledPromptsTest = function ApplicationNavigationDisabledPromptsTest() {
  var _useState3 = (0, _react.useState)('page_1'),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      activeNavItem = _useState4[0],
      setActiveNavItem = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      loggedOut = _useState6[0],
      setLoggedOut = _useState6[1];

  var navigationItems = [{
    key: 'page_1',
    text: 'Page 1'
  }, {
    key: 'page_2',
    text: 'Page 2'
  }, {
    key: 'page_3',
    text: 'Page 3'
  }];
  return _react.default.createElement(_applicationBase.default, {
    locale: "en"
  }, loggedOut ? _react.default.createElement("p", null, "Logged Out") : _react.default.createElement(_applicationNavigation.default, {
    titleConfig: {
      title: 'ApplicationNavigation Disabled Prompts Test'
    },
    navigationItems: navigationItems,
    activeNavigationItemKey: activeNavItem,
    onSelectNavigationItem: function onSelectNavigationItem(key) {
      setActiveNavItem(key);
    },
    onSelectLogout: function onSelectLogout() {
      setLoggedOut(true);
    },
    disablePromptsForLogout: true,
    disablePromptsForNavigationItems: true
  }, _react.default.createElement(PageContent, {
    key: activeNavItem,
    title: activeNavItem
  })));
};

var _default = ApplicationNavigationDisabledPromptsTest;
exports.default = _default;