"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIntl = require("react-intl");

var _DisclosureManagerContext = _interopRequireDefault(require("terra-disclosure-manager/lib/DisclosureManagerContext"));

var _applicationLoadingOverlay = require("../application-loading-overlay");

var _navigationPrompt = require("../navigation-prompt");

var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));

var propTypes = {
  /**
   * The components to render within the context of the DisclosureContainer.
   */
  children: _propTypes.default.node,

  /**
   * The Object (or function that returns an Object) that specifies the messages
   * used to prompt the user when disclosure dismissal occurs when pending state
   * is present.
   */
  navigationPromptResolutionOptions: _navigationPrompt.navigationPromptResolutionOptionsShape
};
/**
 * injectIntl (rather that the ApplicationIntlContext) is used here to keep the DisclosureContainer's context dependencies
 * passive with previous v1.x versions. ApplicationIntlContext cannot be used here without a version bump.
 */

var DisclosureContainer = (0, _reactIntl.injectIntl)(function (_ref) {
  var intl = _ref.intl,
      children = _ref.children,
      navigationPromptResolutionOptions = _ref.navigationPromptResolutionOptions;
  var disclosureManager = (0, _react.useContext)(_DisclosureManagerContext.default);
  var promptCheckpointRef = (0, _react.useRef)();
  var defaultPromptOptions = (0, _react.useMemo)(function () {
    return (0, _navigationPrompt.getUnsavedChangesPromptOptions)(intl);
  }, [intl]);
  (0, _react.useEffect)(function () {
    disclosureManager.registerDismissCheck(function () {
      return new Promise(function (resolve, reject) {
        if (!promptCheckpointRef.current) {
          resolve();
          return;
        }

        promptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || defaultPromptOptions).then(resolve, reject);
      });
    });
  }, [defaultPromptOptions, disclosureManager, navigationPromptResolutionOptions]);
  return _react.default.createElement(_applicationErrorBoundary.default, null, _react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, _react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    ref: promptCheckpointRef
  }, children)));
});
DisclosureContainer.propTypes = propTypes;
var _default = DisclosureContainer;
exports.default = _default;