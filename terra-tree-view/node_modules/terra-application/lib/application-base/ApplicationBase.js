"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _terraBase = _interopRequireDefault(require("terra-base"));

var _terraThemeProvider = _interopRequireDefault(require("terra-theme-provider"));

var _terraBreakpoints = require("terra-breakpoints");

var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));

var _applicationLoadingOverlay = _interopRequireWildcard(require("../application-loading-overlay"));

var _navigationPrompt = require("../navigation-prompt");

var _applicationIntl = require("../application-intl");

var _ApplicationBaseModule = _interopRequireDefault(require("./ApplicationBase.module.scss"));

var cx = _bind.default.bind(_ApplicationBaseModule.default);

var propTypes = {
  /**
   * The components to render within ApplicationBase.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * The locale name to be used to load translated messages.
   */
  locale: _propTypes.default.string.isRequired,

  /**
   * Custom translations for the current locale.
   */
  customTranslatedMessages: function customTranslatedMessages(props, propName, componentName) {
    if (!props[propName]) {
      return null;
    }

    if (Object.keys(props[propName]).length !== 0 && props.locale === undefined) {
      return new Error("Missing locale prop for ".concat(propName, " in ").concat(componentName, " props"));
    }

    return null;
  },

  /**
   * The component to render while the translation files are being retrieved.
   * NOTE: Absolutely no locale-dependent logic should be
   * utilized in this placeholder.
   */
  translationsLoadingPlaceholder: _propTypes.default.node,

  /**
   * The name of the theme to apply to the application using terra-theme-provider.
   */
  themeName: _propTypes.default.string,

  /**
   * If provided, the theme styles are applied to the entire document.
   */
  themeIsGlobal: _propTypes.default.bool,

  /**
   * By default, the elements rendered by ApplicationBase are fit to the Application's parent using 100% height.
   * If `fitToParentIsDisabled` is provided, the Application will render at its intrinsic content height and
   * overflow potentially overflow its parent.
   */
  fitToParentIsDisabled: _propTypes.default.bool,

  /**
   * By default, NavigationPrompts rendered within ApplicationBase will cause the user to be prompted during
   * the window's beforeUnload event. If `unloadPromptIsDisabled` is provided, the user will **not** be prompted
   * before continuing with the unload event, even if NavigationPrompts are present.
   */
  unloadPromptIsDisabled: _propTypes.default.bool
};

var ApplicationBase = function ApplicationBase(_ref) {
  var locale = _ref.locale,
      customTranslatedMessages = _ref.customTranslatedMessages,
      translationsLoadingPlaceholder = _ref.translationsLoadingPlaceholder,
      themeName = _ref.themeName,
      themeIsGlobal = _ref.themeIsGlobal,
      fitToParentIsDisabled = _ref.fitToParentIsDisabled,
      children = _ref.children,
      unloadPromptIsDisabled = _ref.unloadPromptIsDisabled;
  var registeredPromptsRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (unloadPromptIsDisabled) {
      return undefined;
    }

    function onBeforeUnload(event) {
      if (registeredPromptsRef.current && registeredPromptsRef.current.length) {
        event.preventDefault(); // Chrome requires returnValue to be set to present the confirmation dialog

        event.returnValue = ''; // eslint-disable-line no-param-reassign
        // For this prompt, ApplicationBase is limited to browser-defaulted messaging.

        return '';
      }

      return undefined;
    }

    window.addEventListener('beforeunload', onBeforeUnload);
    return function () {
      window.removeEventListener('beforeunload', onBeforeUnload);
    };
  }, [unloadPromptIsDisabled, registeredPromptsRef]);
  return _react.default.createElement(_terraThemeProvider.default, {
    className: cx('application-theme-provider', {
      fill: !fitToParentIsDisabled
    }),
    themeName: themeName,
    isGlobalTheme: themeIsGlobal
  }, _react.default.createElement(_terraBase.default, {
    customMessages: customTranslatedMessages,
    translationsLoadingPlaceholder: translationsLoadingPlaceholder,
    locale: locale
  }, _react.default.createElement(_applicationErrorBoundary.default, null, _react.default.createElement(_applicationIntl.ApplicationIntlProvider, null, _react.default.createElement(_terraBreakpoints.ActiveBreakpointProvider, null, _react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    onPromptChange: function onPromptChange(registeredPrompts) {
      registeredPromptsRef.current = registeredPrompts;
    }
  }, _react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, _react.default.createElement(_react.Suspense, {
    fallback: _react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true
    })
  }, children))))))));
};

ApplicationBase.propTypes = propTypes;
var _default = ApplicationBase;
exports.default = _default;