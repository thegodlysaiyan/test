"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _terraFormField = _interopRequireDefault(require("terra-form-field"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _FieldExamplesModule = _interopRequireDefault(require("./FieldExamples.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var cx = _bind.default.bind(_FieldExamplesModule.default);

var FieldExamples = /*#__PURE__*/function (_React$Component) {
  _inherits(FieldExamples, _React$Component);

  function FieldExamples(props) {
    var _this;

    _classCallCheck(this, FieldExamples);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FieldExamples).call(this, props));
    _this.state = {
      isInvalid: false
    };
    _this.toggleIsInvalid = _this.toggleIsInvalid.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FieldExamples, [{
    key: "toggleIsInvalid",
    value: function toggleIsInvalid() {
      this.setState(function (prevState) {
        return {
          isInvalid: !prevState.isInvalid
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", null, _react.default.createElement(_terraFormField.default, {
        label: "Field Label",
        help: "This is a standard, non-required field.",
        error: "Error Message",
        isInvalid: this.state.isInvalid
      }, _react.default.createElement("div", {
        className: cx('field-content')
      }, "Control Placeholder")), _react.default.createElement(_terraFormField.default, {
        label: "Field Label",
        help: "This is an optional field.",
        error: "Error Message",
        isInvalid: this.state.isInvalid,
        isInline: true,
        showOptional: true
      }, _react.default.createElement("div", {
        className: cx('field-content')
      }, "Control Placeholder")), _react.default.createElement(_terraFormField.default, {
        label: "Field Label",
        help: "This is a required field.",
        error: "Error Message",
        isInvalid: this.state.isInvalid,
        isInline: true,
        required: true
      }, _react.default.createElement("div", {
        className: cx('field-content')
      }, "Control Placeholder")), _react.default.createElement(_terraFormField.default, {
        label: "Field Label",
        help: "This is a required field, but the required indicator is hidden until the field is in error.",
        error: "Now the required indicator is showing because the field is in error.",
        isInvalid: this.state.isInvalid,
        isInline: true,
        required: true,
        hideRequired: true
      }, _react.default.createElement("div", {
        className: cx('field-content')
      }, "Control Placeholder")), _react.default.createElement("hr", null), _react.default.createElement("p", null, "If a field is invalid, an error icon will be displayed.", _react.default.createElement("button", {
        type: "button",
        onClick: this.toggleIsInvalid
      }, "Toggle Invalid State")));
    }
  }]);

  return FieldExamples;
}(_react.default.Component);

var _default = FieldExamples;
exports.default = _default;