"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _terraList = _interopRequireWildcard(require("terra-list"));

var propTypes = {
  /**
   * Menu.Items to be grouped together.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Callback function called when selected index changes.
   */
  onChange: _propTypes.default.func
};
var childContextTypes = {
  isGroupItem: _propTypes.default.bool
};

var initialSingleSelectedIndex = function initialSingleSelectedIndex(children) {
  var childArray = _react.default.Children.toArray(children);

  for (var i = 0; i < childArray.length; i += 1) {
    if (childArray[i].props.isSelected) {
      return i;
    }
  }

  return -1;
};

var MenuItemGroup = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(MenuItemGroup, _React$Component);

  function MenuItemGroup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MenuItemGroup);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MenuItemGroup).call(this, props));
    _this.cloneChildren = _this.cloneChildren.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleItemSelection = _this.handleItemSelection.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      selectedIndex: initialSingleSelectedIndex(props.children)
    };
    return _this;
  }

  (0, _createClass2.default)(MenuItemGroup, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        isGroupItem: true
      };
    }
  }, {
    key: "handleItemSelection",
    value: function handleItemSelection(event, metaData) {
      if (this.state.selectedIndex !== metaData.index) {
        event.preventDefault();
        this.setState({
          selectedIndex: metaData.index
        });

        if (this.props.onChange) {
          this.props.onChange(event, metaData.index);
        }
      }
    }
  }, {
    key: "cloneChildren",
    value: function cloneChildren(children) {
      var _this2 = this;

      return _react.default.Children.map(children, function (child, index) {
        var isSelectable = true;

        if (child.props.isSelectable === false) {
          isSelectable = false;
        }

        return _react.default.cloneElement(child, {
          isSelectable: isSelectable,
          isSelected: _this2.state.selectedIndex === index,
          onClick: _terraList.Utils.wrappedOnClickForItem(child.props.onClick, _this2.handleItemSelection, {
            index: index
          }),
          onKeyDown: _terraList.Utils.wrappedOnKeyDownForItem(child.props.onKeyDown, _this2.handleItemSelection, {
            index: index
          })
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          customProps = (0, _objectWithoutProperties2.default)(_this$props, ["children"]);
      var managedChildren = this.cloneChildren(children);
      return _react.default.createElement(_terraList.default, (0, _extends2.default)({}, customProps, {
        role: "group"
      }), managedChildren);
    }
  }]);
  return MenuItemGroup;
}(_react.default.Component);

MenuItemGroup.propTypes = propTypes;
MenuItemGroup.childContextTypes = childContextTypes;
var _default = MenuItemGroup;
exports.default = _default;