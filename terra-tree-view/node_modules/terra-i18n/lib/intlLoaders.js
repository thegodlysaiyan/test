"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadIntl = exports.default = void 0;

var _intlLoaders = _interopRequireDefault(require("intlLoaders"));

var _intlLocalesSupported = _interopRequireDefault(require("intl-locales-supported"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var supportedIntlConstructors = function supportedIntlConstructors() {
  /**
   * Use try-catch to check if Intl is provided by the browser. In some instances checking Intl will throw an
   * error and crash the page with little information.
   *
   * Reference: https://github.com/cerner/terra-core/issues/2820
   */
  var constructors;

  try {
    if ((typeof Intl === "undefined" ? "undefined" : _typeof(Intl)) === 'object' && typeof Intl.DateTimeFormat === 'function' && typeof Intl.NumberFormat === 'function') {
      constructors = [Intl.DateTimeFormat, Intl.NumberFormat];
    }
  } catch (error) {
    constructors = [];
  }

  return constructors;
};

var loadFallbackIntl = function loadFallbackIntl(localeContext) {
  try {
    if (!(0, _intlLocalesSupported.default)(['en'], supportedIntlConstructors())) {
      _intlLoaders.default.en();
    }

    if (process.env.NODE_ENV !== 'production') {
      console.warn("Locale data was not supplied for the ".concat(localeContext, ". Using en data as the fallback locale data."));
    }
  } catch (e) {
    throw new Error("Locale data was not supplied for the ".concat(localeContext, ", or the en fallback locale."));
  }
};

var loadIntl = function loadIntl(locale) {
  var fallbackLocale = locale.split('-').length > 1 ? locale.split('-')[0] : false;

  try {
    if (!(0, _intlLocalesSupported.default)([locale], supportedIntlConstructors())) {
      _intlLoaders.default[locale]();
    }
  } catch (e) {
    if (fallbackLocale) {
      try {
        if (!(0, _intlLocalesSupported.default)([fallbackLocale], supportedIntlConstructors())) {
          _intlLoaders.default[fallbackLocale]();
        }

        if (process.env.NODE_ENV !== 'production') {
          console.warn("Locale data was not supplied for the ".concat(locale, " locale. Using ").concat(fallbackLocale, " data as the fallback locale data."));
        }
      } catch (error) {
        var localeContext = "".concat(locale, " or ").concat(fallbackLocale, " locales");
        loadFallbackIntl(localeContext);
      }
    } else {
      var _localeContext = "".concat(locale, " locale");

      loadFallbackIntl(_localeContext);
    }
  }
};

exports.loadIntl = loadIntl;
var _default = loadIntl;
/* eslint-enable import/no-unresolved, compat/compat, no-console */

exports.default = _default;