"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _Placeholder = _interopRequireDefault(require("terra-doc-template/lib/Placeholder"));

var _index = _interopRequireWildcard(require("terra-infinite-list/lib/index"));

var _InfiniteListTestCommonModule = _interopRequireDefault(require("./InfiniteListTestCommon.module.scss"));

var _MyInitialLoadingIndicator = _interopRequireDefault(require("../../doc/common/MyInitialLoadingIndicator"));

var _MyProgressiveLoadingIndicator = _interopRequireDefault(require("../../doc/common/MyProgressiveLoadingIndicator"));

var _MyExampleContainer = _interopRequireDefault(require("../../doc/common/MyExampleContainer"));

var _mockProgressive = _interopRequireDefault(require("../../doc/guides/mock-data/mock-progressive"));

var cx = _bind.default.bind(_InfiniteListTestCommonModule.default);

var ProgressiveLoadingList =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ProgressiveLoadingList, _React$Component);

  function ProgressiveLoadingList(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ProgressiveLoadingList);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ProgressiveLoadingList).call(this, props));
    _this.requestData = _this.requestData.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      isFinishedLoading: false,
      currentPageKey: null,
      items: []
    };
    return _this;
  }

  (0, _createClass2.default)(ProgressiveLoadingList, [{
    key: "requestData",
    value: function requestData() {
      var _this2 = this;

      (0, _mockProgressive.default)(this.state.currentPageKey).then(function (response) {
        return _this2.setState(function (prevState) {
          return {
            isFinishedLoading: response.isFinalPage,
            currentPageKey: response.nextPageKey,
            items: prevState.items.concat(response.items)
          };
        });
      });
    }
  }, {
    key: "createItems",
    value: function createItems() {
      return this.state.items.map(function (item) {
        return _react.default.createElement(_index.Item, {
          key: item.key
        }, _react.default.createElement(_Placeholder.default, {
          title: item.title,
          className: cx('item-placeholder')
        }));
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_MyExampleContainer.default, null, _react.default.createElement(_index.default, {
        dividerStyle: "standard",
        isFinishedLoading: this.state.isFinishedLoading,
        onRequestItems: this.requestData,
        initialLoadingIndicator: _react.default.createElement(_MyInitialLoadingIndicator.default, null),
        progressiveLoadingIndicator: _react.default.createElement(_MyProgressiveLoadingIndicator.default, null),
        progressiveLoadingMessage: "Loading allergies...",
        ariaLabel: "Progressive Loading List"
      }, this.createItems()));
    }
  }]);
  return ProgressiveLoadingList;
}(_react.default.Component);

var _default = ProgressiveLoadingList;
exports.default = _default;