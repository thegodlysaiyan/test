"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _Button = _interopRequireDefault(require("terra-button/lib/Button"));

var _SearchField = _interopRequireDefault(require("../../../SearchField"));

var _examplestyles = _interopRequireDefault(require("./examplestyles.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var cx = _bind.default.bind(_examplestyles.default);

var SettingValueSearchField = function SettingValueSearchField() {
  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchText = _useState2[0],
      setSearchText = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      message = _useState4[0],
      setMessage = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = _slicedToArray(_useState5, 2),
      text = _useState6[0],
      setText = _useState6[1];

  var inputRef = (0, _react.useRef)(null);

  var setTextClick = function setTextClick() {
    if (inputRef.current) {
      setTimeout(function () {
        inputRef.current.value = 'IpsumLorem';
        var customEvent;

        if (typeof Event === 'function') {
          customEvent = new Event('input', {
            bubbles: true,
            cancelable: false
          });
        } else {
          customEvent = document.createEvent('Event');
          customEvent.initEvent('input', true, false);
        }

        inputRef.current.dispatchEvent(customEvent);
      }, 1000);
    }
  };

  var handleInvalidSearch = function handleInvalidSearch(value) {
    setSearchText(value);
    setMessage('INVALID Search Text: ');
  };

  var handleChange = function handleChange(event, value) {
    setText(value);
  };

  var handleInput = function handleInput(event) {
    setText(event.target.value);
  };

  var handleSearch = function handleSearch(value) {
    setSearchText(value);
    setMessage('Search Text: ');
  };

  return _react.default.createElement("div", null, _react.default.createElement("div", null, " Minimum Search Length is 3 "), _react.default.createElement(_SearchField.default, {
    inputRef: true,
    id: "searchfield",
    onSearch: handleSearch,
    onInvalidSearch: handleInvalidSearch,
    onChange: handleChange,
    onInput: handleInput,
    minimumSearchTextLength: 3,
    value: text,
    inputRefCallback: function inputRefCallback(ref) {
      inputRef.current = ref;
    }
  }), _react.default.createElement(_Button.default, {
    text: "Set search field text",
    onClick: setTextClick,
    id: "search-field-set-text-button",
    className: cx('programattic-button')
  }), _react.default.createElement("div", {
    id: "search-callback-text"
  }, message, searchText));
};

var _default = SettingValueSearchField;
exports.default = _default;